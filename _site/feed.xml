<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-12-18T20:10:26+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Andro’s tech blog</title><subtitle>Andro의 블로그입니다. 학습했던 것을 정리해 블로그에 올리고 있습니다.</subtitle><author><name>Andro</name><email>seongwoo.dev@gmail.com</email></author><entry><title type="html">Docker 공식 사이트 Chapter 1~3 학습 내용 정리</title><link href="http://localhost:4000/docker/docker_basic/" rel="alternate" type="text/html" title="Docker 공식 사이트 Chapter 1~3 학습 내용 정리" /><published>2019-12-17T00:00:00+09:00</published><updated>2019-12-17T00:00:00+09:00</updated><id>http://localhost:4000/docker/docker_basic</id><content type="html" xml:base="http://localhost:4000/docker/docker_basic/">&lt;h1 id=&quot;목적&quot;&gt;목적&lt;/h1&gt;

&lt;p&gt;이 문서는 2019. 9. 2 기준 &lt;a href=&quot;https://docs.docker.com/get-started/&quot;&gt;Docker 시작하기&lt;/a&gt;를 따라하며 개인적인 학습과 추후 이 내용을 리마인드 할 때 참고하려는 목적을 가지고 있다.&lt;/p&gt;

&lt;h1 id=&quot;진행&quot;&gt;진행&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/get-started/&quot;&gt;Docker 시작하기&lt;/a&gt;는 6개의 part로 나뉘어져 있으며 다음과 같다. 이 중 part 3까지만 진행한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;오리엔테이션&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;컨테이너&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서비스&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스웜&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스택&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;앱 배포&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스웜의 경우 쿠버네티스를 사용하는 트렌드 비춰 학습에서 제외한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스택, 6. 앱 배포의 경우 스웜이 초기화 되야만 동작하기 때문에 학습에서 제외한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-오리엔테이션&quot;&gt;1. 오리엔테이션&lt;/h2&gt;

&lt;p&gt;개념적인 내용은 &lt;a href=&quot;https://docs.docker.com/get-started/&quot;&gt;Docker 시작하기&lt;/a&gt;를 참고하고 docker 실행과 관련된 내용만 남긴다.&lt;/p&gt;

&lt;p&gt;Docker의 버전 확인&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Docker 설치에 대한 자세한 정보 확인&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker version

### 혹은

$ docker info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;hello world 실행&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run hello-world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker container ls --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-컨테이너&quot;&gt;2. 컨테이너&lt;/h2&gt;

&lt;h3 id=&quot;docker-이미지-생성-컨테이너-실행-튜토리얼-진행&quot;&gt;Docker 이미지 생성, 컨테이너 실행 튜토리얼 진행&lt;/h3&gt;

&lt;p&gt;컨테이너로 단순한 서버를 구축하는 튜토리얼을 진행한다.&lt;/p&gt;

&lt;p&gt;우선 Dockerfile을 만든다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch Dockerfile

$ cat Dockerfile
# Use an official Python runtime as a parent image
FROM python:2.7-slim

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD [&quot;python&quot;, &quot;app.py&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Python 패키지 목록을 만든다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat requirements.txt
Flask
Redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;소스코드 작성 app.py&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat app.py
from flask import Flask
from redis import Redis, RedisError
import os
import socket

# Connect to Redis
redis = Redis(host=&quot;redis&quot;, db=0, socket_connect_timeout=2, socket_timeout=2)

app = Flask(__name__)

@app.route(&quot;/&quot;)
def hello():
    try:
        visits = redis.incr(&quot;counter&quot;)
    except RedisError:
        visits = &quot;&amp;lt;i&amp;gt;cannot connect to Redis, counter disabled&amp;lt;/i&amp;gt;&quot;

    html = &quot;&amp;lt;h3&amp;gt;Hello {name}!&amp;lt;/h3&amp;gt;&quot; \
           &quot;&amp;lt;b&amp;gt;Hostname:&amp;lt;/b&amp;gt; {hostname}&amp;lt;br/&amp;gt;&quot; \
           &quot;&amp;lt;b&amp;gt;Visits:&amp;lt;/b&amp;gt; {visits}&quot;
    return html.format(name=os.getenv(&quot;NAME&quot;, &quot;world&quot;), hostname=socket.gethostname(), visits=visits)

if __name__ == &quot;__main__&quot;:
    app.run(host='0.0.0.0', port=80)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dockerfile로 이미지를 생성하기 위하여 Dockerfile, 패키지 목록, 소스코드를 확인&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls
Dockerfile       app.py           requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dockerfile로 friendlyhello라는 이름의 이미지 만들기&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker build --tag=friendlyhello .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성된 이미지 확인&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker image ls
REPOSITORY            TAG                 IMAGE ID
friendlyhello         latest              326387cea398
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성된 이미지를 실행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -p 4000:80 friendlyhello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 컨테이너 80 포트를 4000에 매핑한다.&lt;/p&gt;

&lt;p&gt;해당 url로 접속하여 컨테이너의 동작 확인 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl http://localhost:4000
&amp;lt;h3&amp;gt;Hello World!&amp;lt;/h3&amp;gt;&amp;lt;b&amp;gt;Hostname:&amp;lt;/b&amp;gt; 86e9b8deb983&amp;lt;br/&amp;gt;&amp;lt;b&amp;gt;Visits:&amp;lt;/b&amp;gt; &amp;lt;i&amp;gt;cannot connect to Redis, counter disabled&amp;lt;/i&amp;gt;%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;백그라운드에서 실행하려면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d -p 4000:80 friendlyhello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;docker-이미지-공유&quot;&gt;Docker 이미지 공유&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker 허브&lt;/a&gt;에 로그인한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이미지를 공유하기 위해서는 다음과 같이 이미지 태그를 설정해야한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### docker tag 이미지명 유저이름/레포명:태그명
$ docker tag friendlyhello username/tutorial:part1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설정한 이미지를 업로드한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker push username/tutorial:part1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker 허브&lt;/a&gt;에 로그인하여 해당 repo(예 : tutorial)는 미리 만들어야 한다.&lt;/p&gt;

&lt;p&gt;이미지를 업로드하면 다음과 같이 사용할 수 있다. 해당 이미지가 로컬에 존재하지 않는다면 자동으로 다운로드하고 로컬에 이미지를 생성해준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d -p 4000:80 username/tutorial:part1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-서비스&quot;&gt;3. 서비스&lt;/h2&gt;

&lt;p&gt;서비스의 개념은 &lt;a href=&quot;https://docs.docker.com/get-started/part3/&quot;&gt;Docker 시작하기 - part3 서비스&lt;/a&gt;를 참고한다. 서비스는 하나의 이미지만 실행하고 이미지 실행 방식을 체계화한다.&lt;/p&gt;

&lt;p&gt;서비스의 개념에서 등장하는 것이 docker-compose.yml 파일이고 이는 도커의 행동방식을 정의하는 YAML 파일이다.&lt;/p&gt;

&lt;p&gt;다음과 같이 docker-compose.yml을 작성한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat docker-compose.yml
version: &quot;3&quot;
services:
  web:
    # replace username/repo:tag with your name and image details
    image: username/tutorial:part1
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: &quot;0.1&quot;
          memory: 50M
      restart_policy:
        condition: on-failure
    ports:
      - &quot;4000:80&quot;
    networks:
      - webnet
networks:
  webnet:

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 YAML 파일에 대한 설명은 &lt;a href=&quot;https://docs.docker.com/get-started/part3/&quot;&gt;Docker 시작하기 - part3 서비스&lt;/a&gt;를 참고한다.&lt;/p&gt;

&lt;h3 id=&quot;새로운-load-balanced-app-실행&quot;&gt;새로운 load-balanced app 실행&lt;/h3&gt;

&lt;p&gt;배포 전에 Swarm을 초기화 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker swarm init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 실행하는데 getstartedlab라는 이름의 스택으로 실행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker stack deploy -c docker-compose.yml getstartedlab

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Docker의 서비스 목록을 확인하면 getstartedlab 뒤에 web이 붙어 getstartedlab_web이라는 형태로 서비스가 존재하는 것을 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE                       PORTS
r8ikpt4dypup        getstartedlab_web   replicated          5/5                 username/tutorial:part1   *:4000-&amp;gt;80/tcp

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;getstartedlab 스택의 서비스를 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker stack services getstartedlab
ID                  NAME                MODE                REPLICAS            IMAGE                       PORTS
r8ikpt4dypup        getstartedlab_web   replicated          5/5                 username/tutorial:part1   *:4000-&amp;gt;80/tcp

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같은 명령으로 특정 서비스내 task 목록을 확인할 수 있다.(아마도 컨테이너 단위를 의미하는 듯 싶다.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker service ps getstartedlab_web
ID                  NAME                  IMAGE                       NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
dk5k5bt68eoa        getstartedlab_web.1   username/tutorial:part1   docker-desktop      Running             Running 25 minutes ago
nq0q77gcwo03        getstartedlab_web.2   username/tutorial:part1   docker-desktop      Running             Running 25 minutes ago
hsd20wrbpkjx        getstartedlab_web.3   username/tutorial:part1   docker-desktop      Running             Running 25 minutes ago
qin17db37xvs        getstartedlab_web.4   username/tutorial:part1   docker-desktop      Running             Running 25 minutes ago
s8u54k1ax8f6        getstartedlab_web.5   username/tutorial:part1   docker-desktop      Running             Running 25 minutes ago
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같은 명령으로 특정 스택내 task 목록을 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker stack ps getstartedlab
ID                  NAME                  IMAGE                       NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
dk5k5bt68eoa        getstartedlab_web.1   username/tutorial:part1   docker-desktop      Running             Running 58 minutes ago
nq0q77gcwo03        getstartedlab_web.2   username/tutorial:part1   docker-desktop      Running             Running 58 minutes ago
hsd20wrbpkjx        getstartedlab_web.3   username/tutorial:part1   docker-desktop      Running             Running 58 minutes ago
qin17db37xvs        getstartedlab_web.4   username/tutorial:part1   docker-desktop      Running             Running 58 minutes ago
s8u54k1ax8f6        getstartedlab_web.5   username/tutorial:part1   docker-desktop      Running             Running 58 minutes ago

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;앱-확장&quot;&gt;앱 확장&lt;/h3&gt;

&lt;p&gt;docker-compose.yml 파일을 다음과 같이 수정한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat docker-compose.yml
version: &quot;3&quot;
services:
  web:
    # replace username/repo:tag with your name and image details
    image: username/tutorial:part1
    deploy:
      replicas: 10
      resources:
        limits:
          cpus: &quot;0.1&quot;
          memory: 50M
      restart_policy:
        condition: on-failure
    ports:
      - &quot;4000:80&quot;
    networks:
      - webnet
networks:
  webnet:

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 실행하는데 기존과 같은 getstartedlab라는 이름의 스택으로 실행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker stack deploy -c docker-compose.yml getstartedlab

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;서비스를 확인하면 다음과 같이 업데이트 된 것을 확인할 수 있다. 새로운 레플리카가 생성된 것을 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE                       PORTS
r8ikpt4dypup        getstartedlab_web   replicated          10/10               username/tutorial:part1   *:4000-&amp;gt;80/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker stack ps getstartedlab
ID                  NAME                   IMAGE                       NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS
dk5k5bt68eoa        getstartedlab_web.1    username/tutorial:part1   docker-desktop      Running             Running 2 hours ago
nq0q77gcwo03        getstartedlab_web.2    username/tutorial:part1   docker-desktop      Running             Running 2 hours ago
hsd20wrbpkjx        getstartedlab_web.3    username/tutorial:part1   docker-desktop      Running             Running 2 hours ago
qin17db37xvs        getstartedlab_web.4    username/tutorial:part1   docker-desktop      Running             Running 2 hours ago
s8u54k1ax8f6        getstartedlab_web.5    username/tutorial:part1   docker-desktop      Running             Running 2 hours ago
sqn7aohfghfg        getstartedlab_web.6    username/tutorial:part1   docker-desktop      Running             Running 3 minutes ago
3wee43wtqo1q        getstartedlab_web.7    username/tutorial:part1   docker-desktop      Running             Running 3 minutes ago
0h6xfiw9a92s        getstartedlab_web.8    username/tutorial:part1   docker-desktop      Running             Running 3 minutes ago
metnndctvyn4        getstartedlab_web.9    username/tutorial:part1   docker-desktop      Running             Running 3 minutes ago
rn22s1618j0g        getstartedlab_web.10   username/tutorial:part1   docker-desktop      Running             Running 3 minutes ago
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스택의 종료는 다음과 같이 한다. &lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker stack rm getstartedlab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;swarm의 종료는 다음과 같이 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker swarm leave --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;명령어-모음&quot;&gt;명령어 모음&lt;/h1&gt;

&lt;p&gt;파트별로 진행하며 사용한 명령어만 간략하게 살펴보기 위하여 정리하였다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;part1 오리엔테이션&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## List Docker CLI commands
$ docker
$ docker container --help

## Display Docker version and info
$ docker --version
$ docker version
$ docker info

## Execute Docker image
$ docker run hello-world

## List Docker images
$ docker image ls

## List Docker containers (running, all, all in quiet mode)
$ docker container ls
$ docker container ls --all
$ docker container ls -aq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;part2 컨테이너&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker build -t friendlyhello .  # Create image using this directory's Dockerfile
$ docker run -p 4000:80 friendlyhello  # Run &quot;friendlyhello&quot; mapping port 4000 to 80
$ docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
$ docker container ls                                # List all running containers
$ docker container ls -a             # List all containers, even those not running
$ docker container stop &amp;lt;hash&amp;gt;           # Gracefully stop the specified container
$ docker container kill &amp;lt;hash&amp;gt;         # Force shutdown of the specified container
$ docker container rm &amp;lt;hash&amp;gt;        # Remove specified container from this machine
$ docker container rm $(docker container ls -a -q)         # Remove all containers
$ docker image ls -a                             # List all images on this machine
$ docker image rm &amp;lt;image id&amp;gt;            # Remove specified image from this machine
$ docker image rm $(docker image ls -a -q)   # Remove all images from this machine
$ docker login             # Log in this CLI session using your Docker credentials
$ docker tag &amp;lt;image&amp;gt; username/repository:tag  # Tag &amp;lt;image&amp;gt; for upload to registry
$ docker push username/repository:tag            # Upload tagged image to registry
$ docker run username/repository:tag                   # Run image from a registry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;part3 서비스&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker stack ls                                            # List stacks or apps
$ docker stack deploy -c &amp;lt;composefile&amp;gt; &amp;lt;appname&amp;gt;  # Run the specified Compose file
$ docker service ls                 # List running services associated with an app
$ docker service ps &amp;lt;service&amp;gt;                  # List tasks associated with an app
$ docker inspect &amp;lt;task or container&amp;gt;                   # Inspect task or container
$ docker container ls -q                                      # List container IDs
$ docker stack rm &amp;lt;appname&amp;gt;                             # Tear down an application
$ docker swarm leave --force      # Take down a single node swarm from the manager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Andro</name><email>seongwoo.dev@gmail.com</email></author><category term="Docker" /><summary type="html">이 문서는 2019. 9. 2 기준 Docker 시작하기를 따라하며 개인적인 학습과 추후 이 내용을 리마인드 할 때 참고하려는 목적을 가지고 있다.</summary></entry><entry><title type="html">Boto3를 이용한 Amazon S3, Kinesis Data Firehose 사용하기</title><link href="http://localhost:4000/boto3/boto3_basic/" rel="alternate" type="text/html" title="Boto3를 이용한 Amazon S3, Kinesis Data Firehose 사용하기" /><published>2019-12-16T00:00:00+09:00</published><updated>2019-12-16T00:00:00+09:00</updated><id>http://localhost:4000/boto3/boto3_basic</id><content type="html" xml:base="http://localhost:4000/boto3/boto3_basic/">&lt;h1 id=&quot;테스트-목적&quot;&gt;테스트 목적&lt;/h1&gt;

&lt;p&gt;AWS를 Python 개발환경에서 사용하기 위한 방법중 하나는 Boto3 라이브러리를 이용하는 것이다.&lt;/p&gt;

&lt;p&gt;이 테스트는 Boto3를 이용하여 아래의 서비스에 접근하여 사용하는 방법을 공유하기 위한 목적이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Amazon S3&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Kinesis Firehose&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;테스트-환경&quot;&gt;테스트 환경&lt;/h1&gt;

&lt;p&gt;테스트 환경은 다음과 같다.&lt;/p&gt;

&lt;p&gt;OS : macOS mojave 10.14.6&lt;/p&gt;

&lt;p&gt;Python 버전 : 3.7.3&lt;/p&gt;

&lt;p&gt;Boto3 버전 : 1.9.215&lt;/p&gt;

&lt;p&gt;AWS CLI 버전 정보&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;aws-cli : 1.16.222 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Python : 2.7.16 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Darwin : 18.7.0 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;botocore : 1.12.212&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tree 버전 : 1.8.0&lt;/p&gt;

&lt;p&gt;테스트 사전 정보&lt;/p&gt;

&lt;p&gt;다음과 같은 사전 정보가 필요하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;테스트 환경 구성 방법&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;awscli 설치 및 사용법&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;테스트-환경-구성-방법&quot;&gt;테스트 환경 구성 방법&lt;/h2&gt;

&lt;p&gt;virtual env로 환경을 구성한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ virtualenv .venv
Using base prefix '/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7'
New python executable in /Users/kevin/dev/boto3_test/amazon_s3/.venv/bin/python3.7
Also creating executable in /Users/kevin/dev/boto3_test/amazon_s3/.venv/bin/python
Installing setuptools, pip, wheel... 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;virtual env 활성화후 boto3 설치&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ source .venv/bin/activate
$ pip3 install boto3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;aws-cli-사용법&quot;&gt;AWS CLI 사용법&lt;/h2&gt;

&lt;p&gt;다음 링크를 참고한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/install-macos.html&quot;&gt;macOS에 AWS CLI 설치&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-services-s3.html&quot;&gt;AWS CLI에서 Amazon S3 사용&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;테스트--amazon-s3&quot;&gt;테스트 : Amazon S3&lt;/h1&gt;

&lt;h2 id=&quot;테스트-목적-1&quot;&gt;테스트 목적&lt;/h2&gt;

&lt;p&gt;S3 사용에 있어 다음과 같은 케이스가 발생할 것으로 예상된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;로컬 파일을 S3에 업로드 하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;S3에서 로컬로 파일 다운로드하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;S3에서 파일 삭제하기 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;S3의 디렉터리를 로컬로 다운로드하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;로컬 디렉터리를 S3에 업로드 하기&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 테스트는 위의 케이스 별로 시나리오대로 진행하고 나온 결과가 올바른 지를 확인하는 데에 목적이 있다.&lt;/p&gt;

&lt;h2 id=&quot;케이스별-공통사항&quot;&gt;케이스별 공통사항&lt;/h2&gt;

&lt;p&gt;세부 케이스를 진행하는데 이 테스트에서는 다음과 같은 공통사항이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;미리 지정한 profile로 session 인스턴스 생성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;session 인스턴스로 s3 resource 인스턴스 생성&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python 코드로 정리하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import boto3

def get_s3():
    # aws profile
    session = boto3.Session(profile_name=&quot;test&quot;)
    s3 = session.resource('s3')
    return s3 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;케이스--로컬-파일을-s3에-업로드-하기&quot;&gt;케이스 : 로컬 파일을 S3에 업로드 하기&lt;/h2&gt;

&lt;p&gt;다음과 같은 시나리오를 바탕으로 테스트를 진행한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;로컬 파일을 생성한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;생성된 로컬 파일을 s3://bucket/boto3-test/ 경로에 업로드 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;다음과 같이 Python 코드를 작성하고 실행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import boto3

def get_s3():
    session = boto3.Session(profile_name=&quot;test&quot;)
    s3 = session.resource('s3')
    return s3


def make_file(path=&quot;./boto3_file_upload_test.txt&quot;):
    with open(path, &quot;w&quot;) as wf:
        wf.write(&quot;This file boto3 file upload test !!!!&quot;)


def main():
    # make file
    file_path = &quot;./boto3_file_upload_test.txt&quot;
    make_file(file_path)

    # upload s3
    s3 = get_s3()
    bucket = s3.Bucket('bucket')
    bucket.upload_file(
        file_path, 'boto3-test/boto3_file_upload_test.txt')


if __name__ == &quot;__main__&quot;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성한 로컬 파일이 s3에 업로드 되었는지 확인한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ aws s3 ls s3://bucket/boto3-test/
2019-08-23 14:39:54          0
2019-08-23 14:45:08         37 boto3_file_upload_test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 결과는 다음과 정리할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;파일을 생성하여 Boto3를 이용하여 S3에 업로드한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AWS CLI를 통해 생성된 파일이 업로드가 된 것을 확인할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;케이스--s3에서-로컬로-파일-다운로드하기&quot;&gt;케이스 : S3에서 로컬로 파일 다운로드하기&lt;/h2&gt;

&lt;p&gt;다음과 같은 시나리오를 바탕으로 테스트를 진행한다.&lt;/p&gt;

&lt;p&gt;s3://bucket/boto3-test/boto3_file_upload.txt 파일을 로컬로 다운로드 한다.&lt;/p&gt;

&lt;p&gt;다음과 같이 Python코드를 작성하고 실행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import boto3

def get_s3():
    # aws profile
    session = boto3.Session(profile_name=&quot;test&quot;)
    s3 = session.resource('s3')
    return s3

def main():
    download_file_path = &quot;./boto3_file_upload_test2.txt&quot;

    # download s3
    s3 = get_s3()
    bucket = s3.Bucket('bucket')
    bucket.download_file(
        'boto3-test/boto3_file_upload_test.txt', download_file_path)

if __name__ == &quot;__main__&quot;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다운로드한 파일을 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat boto3_file_upload_test2.txt
This file boto3 file upload test !!!!%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 결과는 다음과 정리할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Boto3를 이용하여 S3의 업로드된 파일을 다운로드한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;커널 명령을 통해 실제로 S3에서 파일이 다운로드 된 것을 확인할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;케이스--s3의-파일-삭제하기&quot;&gt;케이스 : S3의 파일 삭제하기 &lt;/h2&gt;

&lt;p&gt;다음과 같은 시나리오를 바탕으로 테스트를 진행한다.&lt;/p&gt;

&lt;p&gt;s3://bucket/boto3-test/boto3_file_upload.txt 파일을 삭제한다.&lt;/p&gt;

&lt;p&gt;다음과 같이 Python코드를 작성하고 실행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import boto3

def get_s3():
    # aws profile
    session = boto3.Session(profile_name=&quot;test&quot;)
    s3 = session.resource('s3')
    return s3

def main():
    # delete s3
    s3 = get_s3()
    bucket = s3.Bucket('bucket')
    obj = bucket.Object('boto3-test/boto3_file_upload_test.txt')
    obj.delete()

if __name__ == &quot;__main__&quot;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;삭제 되었는지 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ aws s3 ls s3://bucket/boto3-test/
2019-08-23 14:39:54          0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 결과는 다음과 정리할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Boto3를 이용하여 S3의 업로드된 파일을 삭제한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AWS CLI를 통해 실제로 S3에서 파일이 삭제 된 것을 확인할 수 있었다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;케이스--s3-디렉터리-다운로드-하기&quot;&gt;케이스 : S3 디렉터리 다운로드 하기&lt;/h2&gt;

&lt;p&gt;다음과 같은 시나리오를 바탕으로 테스트를 진행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;위의 S3 경로 s3://bucket/boto3-test/download_test_directory 디렉터리(빈 디렉터리는 제외)를 로컬로 다운로드한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다운로드 할 파일을 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ aws s3 ls s3://bucket/boto3-test/download_test_directory --recursive
2019-08-26 19:07:16         39 boto3-test/download_test_directory/dir1/dir1_1/dir1_1_file1.txt
2019-08-26 19:07:17         39 boto3-test/download_test_directory/dir1/dir1_1/dir1_1_file2.txt
2019-08-26 19:07:15         39 boto3-test/download_test_directory/dir1/dir1_file1.txt
2019-08-26 19:07:14         39 boto3-test/download_test_directory/dir2/dir2_file1.txt
2019-08-26 19:07:14         39 boto3-test/download_test_directory/dir2/dir2_file2.txt
2019-08-26 19:08:10          0 boto3-test/download_test_directory/dir3/
2019-08-26 19:07:13         39 boto3-test/download_test_directory/file1.txt
2019-08-26 19:07:13         39 boto3-test/download_test_directory/file2.txt 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같은 Python 코드를 작성하고 실행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import boto3
import os


def get_s3():
    session = boto3.Session(profile_name=&quot;test&quot;)
    s3 = session.resource('s3')
    return s3


def download_directory_to_s3(s3_dir_path, local_dir_path):
    s3 = get_s3()
    bucket = s3.Bucket('bucket')

    path_list = list()
    for obj in bucket.objects.filter(Prefix=s3_dir_path):
        s3_path = obj.key
        local_path = s3_path.replace(s3_dir_path, local_dir_path)

        if s3_path[-1] == '/':
            continue

        dir_name = os.path.dirname(local_path)
        if not os.path.exists(dir_name):
            print(&quot;make directory {}&quot;.format(dir_name))
            os.makedirs(dir_name)

        path_list.append([s3_path, local_path])

    for path in path_list:
        print(&quot;Download from {} to {}&quot;.format(path[0], path[1]))
        bucket.download_file(path[0], path[1])


def main():
    parameter = {&quot;s3_dir_path&quot;: &quot;boto3-test/download_test_directory/&quot;,
                 &quot;local_dir_path&quot;: &quot;./download_test_directory/&quot;,
                 }
    download_directory_to_s3(**parameter)


if __name__ == &quot;__main__&quot;:
    main()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;디렉터리가 정상적으로 다운로드 되었는지 확인한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tree download_test_directory
download_test_directory
├── dir1
│   ├── dir1_1
│   │   ├── dir1_1_file1.txt
│   │   └── dir1_1_file2.txt
│   └── dir1_file1.txt
├── dir2
│   ├── dir2_file1.txt
│   └── dir2_file2.txt
├── file1.txt
└── file2.txt
3 directories, 7 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 결과는 다음과 같이 정리할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Boto3를 이용하여 S3의 업로드된 디렉터리를 로컬로 다운로드한다. (빈 디렉터리는 제외)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;커널 명령을 통해 실제로 S3에서 로컬로 디렉터리가 다운로드 된 것을 확인할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;케이스--로컬-디렉터리를-s3에-업로드-하기&quot;&gt;케이스 : 로컬 디렉터리를 S3에 업로드 하기&lt;/h2&gt;

&lt;p&gt;다음과 같은 시나리오를 바탕으로 테스트를 진행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;로컬 디렉터리(빈 디렉터리는 제외)를 s3 경로 s3://bucket/boto3-test/upload_test_directory에 업로드 한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;업로드할 디렉터리는 다음과 같은 구조로 이루어져 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tree upload_test_directory
upload_test_directory
├── dir1
│   ├── dir1_1
│   │   ├── dir1_1_file1.txt
│   │   └── dir1_1_file2.txt
│   └── dir1_file1.txt
├── dir2
│   ├── dir2_file1.txt
│   └── dir2_file2.txt
├── dir3
├── file1.txt
└── file2.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같은 Python 코드를 작성하고 실행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import boto3
import os


def get_s3():
    session = boto3.Session(profile_name=&quot;test&quot;)
    s3 = session.resource('s3')
    return s3


def upload_directory_to_s3(local_dir_path, s3_dir_path):
    path_list = list()
    for path, sub_dirs, files in os.walk(local_dir_path):
        for filename in files:
            local_file_path = os.path.join(path, filename)

            s3_file_path_depart = [s3_dir_path,
                                   os.path.relpath(local_file_path, local_dir_path)]
            s3_file_path = &quot;&quot;.join(s3_file_path_depart)
            path_list.append([local_file_path, s3_file_path])

    s3 = get_s3()
    bucket = s3.Bucket('bucket')

    for paths in path_list:
        print(&quot;upload from {} to {}&quot;.format(paths[0], paths[1]))
        bucket.upload_file(paths[0], paths[1])


def main():
    parameter = {&quot;local_dir_path&quot;: &quot;./upload_test_directory/&quot;,
                 &quot;s3_dir_path&quot;: &quot;boto3-test/upload_test_directory/&quot;}
    upload_directory_to_s3(**parameter)


if __name__ == &quot;__main__&quot;:
    main()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;os 모듈중 정리가 필요한 메서드를 아래에 정리하였다.&lt;/p&gt;

&lt;p&gt;os.walk(디렉터리 경로)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;해당 디렉터리 경로를 중심으로 하위 디렉터리를 탐색하여 generator 타입로 반환해준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;반환되는 정보는 path, sub_dirs, files 형태이며 이에 대한 설명은 다음과 같다&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;path : 경로&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;sub_dirs : path 하위 디렉터리들의 이름들&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;files : path 하위 파일의 이름들&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;디렉터리의 업로드가 잘 되었는지 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ aws s3 ls s3://bucket/boto3-test/upload_test_directory/ --recursive
2019-08-26 16:42:02       6148 boto3-test/upload_test_directory/.DS_Store
2019-08-26 16:42:04       6148 boto3-test/upload_test_directory/dir1/.DS_Store
2019-08-26 16:42:05       6148 boto3-test/upload_test_directory/dir1/dir1_1/.DS_Store
2019-08-26 16:42:07         37 boto3-test/upload_test_directory/dir1/dir1_1/dir1_1_file1.txt
2019-08-26 16:42:08         37 boto3-test/upload_test_directory/dir1/dir1_1/dir1_1_file2.txt
2019-08-26 16:42:04         37 boto3-test/upload_test_directory/dir1/dir1_file1.txt
2019-08-26 16:42:03         37 boto3-test/upload_test_directory/dir2/dir2_file1.txt
2019-08-26 16:42:03         37 boto3-test/upload_test_directory/dir2/dir2_file2.txt
2019-08-26 16:42:02         37 boto3-test/upload_test_directory/file1.txt
2019-08-26 16:42:01         37 boto3-test/upload_test_directory/file2.txt 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 결과는 다음과 같이 정리할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Boto3를 이용하여 로컬 디렉터리(빈 디렉터리는 제외)를 S3에 업로드한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AWS CLI 명령을 통해 실제로 로컬에서 S3에 업로드 된 것을 확인할 수 있었다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;테스트--kinesis-data-firehose&quot;&gt;테스트 : Kinesis Data Firehose&lt;/h1&gt;

&lt;h2 id=&quot;테스트-목적-2&quot;&gt;테스트 목적 &lt;/h2&gt;

&lt;p&gt;Kinesis Data Firehose 사용에 있어 다음과 같은 케이스가 발생할 것으로 예상된다. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Delivery stream 리스트 확인하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;단일 레코드를 Firehose에 보내기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;복수 레코드를 Firehose에 보내기&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 테스트는 위의 케이스 별로 시나리오대로 진행하고 나온 결과가 올바른 지를 확인하는 데에 목적이 있다.&lt;/p&gt;

&lt;h2 id=&quot;테스트전-확인사항&quot;&gt;테스트전 확인사항&lt;/h2&gt;

&lt;p&gt;테스트전 Firehose 정상 동작 확인&lt;/p&gt;

&lt;p&gt;Firehose가 정상적으로 동작하는지에 대한 확인은 Management console상에서 해당 Delivery Stream의 “Test with demo data”를 통하여 알 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;케이스--delivery-stream-리스트-확인하기&quot;&gt;케이스 : Delivery stream 리스트 확인하기&lt;/h2&gt;

&lt;p&gt;다음과 같은 시나리오를 바탕으로 진행한다.&lt;/p&gt;

&lt;p&gt;Firehose 클라이언트에 접근하여 접근가능한 Delivery stream의 목록을 출력한다.&lt;/p&gt;

&lt;p&gt;다음과 같은 파이썬 코드를 작성한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import boto3

def get_firehose_client():
    session = boto3.Session(profile_name=&quot;test&quot;)
    firehose = session.client(&quot;firehose&quot;)
    return firehose


def list_delivery_streams():
    firehose = get_firehose_client()

    response_direct_put = firehose.list_delivery_streams(
        DeliveryStreamType=&quot;DirectPut&quot;)
    response_kinesis_stream = firehose.list_delivery_streams(
        DeliveryStreamType=&quot;KinesisStreamAsSource&quot;)
    print(&quot;List of Deliver Streams&quot;)
    print(&quot;Direct Put : {}&quot;.format(response_direct_put[&quot;DeliveryStreamNames&quot;]))
    print(&quot;Kinesis Stream As Source : {}&quot;.format(
        response_kinesis_stream[&quot;DeliveryStreamNames&quot;]))


def main():
    list_delivery_streams()


if __name__ == &quot;__main__&quot;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파이썬 코드를 실행하면 다음과 같은 결과를 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3 main.py
List of Deliver Streams
DirectPut : ['test-firehose-es-poc']
KinesisStream As Source : ['test-stream-firehose-es-poc']
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;AWS CLI로 Delivery stream 리스트를 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ aws firehose list-delivery-streams
{
 &quot;DeliveryStreamNames&quot;: [
 &quot;test-firehose-es-poc&quot;,
 &quot;test-stream-firehose-es-poc&quot;
 ],
 &quot;HasMoreDeliveryStreams&quot;: false
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 결과는 다음과 같이 정리할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Boto3를 이용하여 Delivery Stream의 목록을 확인할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AWS CLI 명령을 통해 실제로 확인한 결과와 Boto3로 확인한 결과가 동일함을 알 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;케이스--단일-레코드를-firehose에-보내기&quot;&gt;케이스 : 단일 레코드를 Firehose에 보내기&lt;/h2&gt;

&lt;p&gt;다음과 같은 시나리오를 바탕으로 진행한다.&lt;/p&gt;

&lt;p&gt;다음과 같은 샘플 데이터를 ”test-firehose-es-poc” Delivery stream으로 전송한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
	&quot;user_id&quot;: &quot;Aster-Kotlin-Sapphire-564&quot;,
	&quot;app_version&quot;: &quot;v1.5.16(90)&quot;,
	&quot;device_id&quot;: &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;,
	&quot;device_manufacturer&quot;: &quot;LG&quot;,
	&quot;device_name&quot;: &quot;LG G7 ThinQ&quot;,
	&quot;device_model&quot;: &quot;LM-G710N&quot;,
	&quot;device_os&quot;: &quot;Android&quot;,
	&quot;device_os_number&quot;: &quot;8.0&quot;,
	&quot;event&quot;: &quot;interest_service_click&quot;,
	&quot;interest_id&quot;: 1201,
	&quot;index&quot;: 1,
	&quot;interest_name&quot;: &quot;창업/스타트업&quot;,
	&quot;interest_service_id&quot;: None,
	&quot;interest_service_type&quot;: &quot;2&quot;,
	&quot;interest_service_name&quot;: &quot;piano&quot;,
	&quot;timestamp&quot;: &quot;2019-04-30T07:30:00Z&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“test-firehose-es-poc” Deliver stream은 Direct put으로 들어온 데이터를 Amazon elasticsearch에 전송하고 s3에 백업 데이터를 생성한다.&lt;/p&gt;

&lt;p&gt;다음과 같은 Python 코드를 작성한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import boto3
import json


def get_firehose_client():
    session = boto3.Session(profile_name=&quot;test&quot;)
    firehose = session.client(&quot;firehose&quot;)
    return firehose


def put_record_to_delivery_stream(test_data):
    print(&quot;Put record to Delivery Stream&quot;)

    firehose = get_firehose_client()

    response = firehose.put_record(
        DeliveryStreamName=&quot;test-firehose-es-poc&quot;,
        Record={&quot;Data&quot;: json.dumps(test_data, ensure_ascii=False)}
    )

    print(response)


def main():
    test_data = {
        &quot;user_id&quot;: &quot;Aster-Kotlin-Sapphire-564&quot;,
        &quot;app_version&quot;: &quot;v1.5.16(90)&quot;,
        &quot;device_id&quot;: &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;,
        &quot;device_manufacturer&quot;: &quot;LG&quot;,
        &quot;device_name&quot;: &quot;LG G7 ThinQ&quot;,
        &quot;device_model&quot;: &quot;LM-G710N&quot;,
        &quot;device_os&quot;: &quot;Android&quot;,
        &quot;device_os_number&quot;: &quot;8.0&quot;,
        &quot;event&quot;: &quot;interest_service_click&quot;,
        &quot;interest_id&quot;: 1201,
        &quot;index&quot;: 1,
        &quot;interest_name&quot;: &quot;창업/스타트업&quot;,
        &quot;interest_service_id&quot;: None,
        &quot;interest_service_type&quot;: &quot;2&quot;,
        &quot;interest_service_name&quot;: &quot;piano&quot;,
        &quot;timestamp&quot;: &quot;2019-04-30T07:30:00Z&quot;
    }

    put_record_to_delivery_stream(test_data)


if __name__ == &quot;__main__&quot;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Python 코드를 실행하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3 main.py
Put record to Delivery Stream
{'RecordId': 'OkvHgs4vIsuRjYw0O5VZB1EobIDBMq7nrvxe/eXDMtdQEDC+eFnEL3T5cILNN+pGD4cu284LsuuC0dAWO7GCZcU3tVcxnr8gFfYfFMsNLuz6KLrbOAV1NaN6oPcxhicH5CpdBHAsxFoZPugkAGe7axq9odkI+CMIsD76w7pHUF2I7rQUb8hswnKp1iHx6O6Ip4MbvwefA2U1kPyyqnP1hTPprg/M8xY4', 'Encrypted': False, 'ResponseMetadata': {'RequestId': 'f609df57-39b8-ccff-a3d4-eadd7b964c48', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amzn-requestid': 'f609df57-39b8-ccff-a3d4-eadd7b964c48', 'x-amz-id-2': 'Rwyt+v8XyhuqHJYMgpacWRLeSUAQg7Im9hEVdeR/4Utu49+fOyxC20NmHppA9UUg2v+FiDfvVquVx1K7mrGFUiVXOXmLalUd', 'content-type': 'application/x-amz-json-1.1', 'content-length': '257', 'date': 'Mon, 26 Aug 2019 01:18:02 GMT'}, 'RetryAttempts': 0}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실제로 Amazon elasticsearch에 샘플데이터가 입력 되었는지 확인한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -XGET https://{es_address}/interest_service_click2/_search\?filter_path\=hits\&amp;amp;format\=json\&amp;amp;pretty
{
  &quot;hits&quot; : {
    &quot;total&quot; : 1,
    &quot;max_score&quot; : 1.0,
    &quot;hits&quot; : [
      {
        &quot;_index&quot; : &quot;interest_service_click2&quot;,
        &quot;_type&quot; : &quot;isc&quot;,
        &quot;_id&quot; : &quot;49595937143545169094912243846452981551249391789660962818.0&quot;,
        &quot;_score&quot; : 1.0,
        &quot;_source&quot; : {
          &quot;user_id&quot; : &quot;Aster-Kotlin-Sapphire-564&quot;,
          &quot;app_version&quot; : &quot;v1.5.16(90)&quot;,
          &quot;device_id&quot; : &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;,
          &quot;device_manufacturer&quot; : &quot;LG&quot;,
          &quot;device_name&quot; : &quot;LG G7 ThinQ&quot;,
          &quot;device_model&quot; : &quot;LM-G710N&quot;,
          &quot;device_os&quot; : &quot;Android&quot;,
          &quot;device_os_number&quot; : &quot;8.0&quot;,
          &quot;event&quot; : &quot;interest_service_click&quot;,
          &quot;interest_id&quot; : 1201,
          &quot;index&quot; : 1,
          &quot;interest_name&quot; : &quot;창업/스타트업&quot;,
          &quot;interest_service_id&quot; : null,
          &quot;interest_service_type&quot; : &quot;2&quot;,
          &quot;interest_service_name&quot; : &quot;piano&quot;,
          &quot;timestamp&quot; : &quot;2019-04-30T07:30:00Z&quot;
        }
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Amazon elasticsearch의 백업용도로 저장된 S3를 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ aws s3 ls s3://test-es-raw-poc/2019/08/26/01/
2019-08-26 10:19:05        520 test-firehose-es-poc-1-2019-08-26-01-18-03-d2346539-c5c2-4385-b163-4b60b14ea33c

$ aws s3 cp s3://test-es-raw-poc/2019/08/26/01/test-firehose-es-poc-1-2019-08-26-01-18-03-d2346539-c5c2-4385-b163-4b60b14ea33c ./single_record.txt
download: s3://test-es-raw-poc/2019/08/26/01/test-firehose-es-poc-1-2019-08-26-01-18-03-d2346539-c5c2-4385-b163-4b60b14ea33c to ./single_record.txt

$ cat single_record.txt
{&quot;user_id&quot;: &quot;Aster-Kotlin-Sapphire-564&quot;, &quot;app_version&quot;: &quot;v1.5.16(90)&quot;, &quot;device_id&quot;: &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;, &quot;device_manufacturer&quot;: &quot;LG&quot;, &quot;device_name&quot;: &quot;LG G7 ThinQ&quot;, &quot;device_model&quot;: &quot;LM-G710N&quot;, &quot;device_os&quot;: &quot;Android&quot;, &quot;device_os_number&quot;: &quot;8.0&quot;, &quot;event&quot;: &quot;interest_service_click&quot;, &quot;interest_id&quot;: 1201, &quot;index&quot;: 1, &quot;interest_name&quot;: &quot;창업/스타트업&quot;, &quot;interest_service_id&quot;: null, &quot;interest_service_type&quot;: &quot;2&quot;, &quot;interest_service_name&quot;: &quot;piano&quot;, &quot;timestamp&quot;: &quot;2019-04-30T07:30:00Z&quot;}%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 결과는 다음과 같이 정리할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Boto3를 이용하여 단일 레코드를 firehose에 전송한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Amazon elasticsearch의 index와 S3의 백업 데이터를 확인한 결과 단일 레코드가 정상적으로 전송된 것을 확인할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;케이스--다중-레코드를-firehose에-보내기&quot;&gt;케이스 : 다중 레코드를 firehose에 보내기&lt;/h2&gt;

&lt;p&gt;다음과 같은 시나리오를 바탕으로 진행한다.&lt;/p&gt;

&lt;p&gt;다음과 같은 샘플 데이터를 “test-firehose-es-poc” Delivery stream으로 전송한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ &quot;user_id&quot; : &quot;Aster-Kotlin-Sapphire-564&quot;, &quot;app_version&quot; : &quot;v1.5.16(90)&quot;, &quot;device_id&quot; : &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;, &quot;device_manufacturer&quot; : &quot;LG&quot;, &quot;device_name&quot; : &quot;LG G7 ThinQ&quot;, &quot;device_model&quot; : &quot;LM-G710N&quot;, &quot;device_os&quot; : &quot;Android&quot;, &quot;device_os_number&quot; : &quot;8.0&quot;, &quot;event&quot; : &quot;interest_service_click&quot;, &quot;interest_id&quot; : 1201, &quot;index&quot; : 1, &quot;interest_name&quot; : &quot;창업/스타트업&quot;, &quot;interest_service_id&quot; : null, &quot;interest_service_type&quot; : &quot;2&quot;, &quot;interest_service_name&quot; : &quot;piano&quot;, &quot;timestamp&quot; : &quot;2019-05-03T01:15:00Z&quot; }
{ &quot;user_id&quot; : &quot;Aster-Kotlin-Sapphire-564&quot;, &quot;app_version&quot; : &quot;v1.5.16(90)&quot;, &quot;device_id&quot; : &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;, &quot;device_manufacturer&quot; : &quot;LG&quot;, &quot;device_name&quot; : &quot;LG G7 ThinQ&quot;, &quot;device_model&quot; : &quot;LM-G710N&quot;, &quot;device_os&quot; : &quot;Android&quot;, &quot;device_os_number&quot; : &quot;8.0&quot;, &quot;event&quot; : &quot;interest_service_click&quot;, &quot;interest_id&quot; : 1301, &quot;index&quot; : 1, &quot;interest_name&quot; : &quot;취업&quot;, &quot;interest_service_id&quot; : null, &quot;interest_service_type&quot; : &quot;배워봐요&quot;, &quot;interest_service_name&quot; : &quot;학원&quot;,  &quot;timestamp&quot; : &quot;2019-05-03T00:50:00Z&quot; }
{ &quot;user_id&quot; : &quot;Aster-Kotlin-Sapphire-564&quot;, &quot;app_version&quot; : &quot;v1.5.16(90)&quot;, &quot;device_id&quot; : &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;, &quot;device_manufacturer&quot; : &quot;LG&quot;, &quot;device_name&quot; : &quot;LG G7 ThinQ&quot;, &quot;device_model&quot; : &quot;LM-G710N&quot;, &quot;device_os&quot; : &quot;Android&quot;, &quot;device_os_number&quot; : &quot;8.0&quot;, &quot;event&quot; : &quot;interest_service_click&quot;, &quot;interest_id&quot; : 1101, &quot;index&quot; : 1, &quot;interest_name&quot; : &quot;초등학교&quot;, &quot;interest_service_id&quot; : null, &quot;interest_service_type&quot; : &quot;물어봐요&quot;, &quot;interest_service_name&quot; : &quot;대나무숲&quot;, &quot;timestamp&quot; : &quot;2019-05-03T00:20:00Z&quot; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“test-firehose-es-poc” Deliver stream은 Direct put으로 들어온 데이터를 Amazon elasticsearch에 전송하고 s3에 백업 데이터를 생성한다.&lt;/p&gt;

&lt;p&gt;다음과 같은 Python 코드를 작성한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import boto3
import json


def get_firehose_client():
    session = boto3.Session(profile_name=&quot;test&quot;)
    firehose = session.client(&quot;firehose&quot;)
    return firehose

def batch_record_to_delivery_stream(test_data_list):
    print(&quot;Put multiple records to Deliver Stream&quot;)

    records = list(map(lambda data : {&quot;Data&quot;: json.dumps(data, ensure_ascii=False)}, test_data_list))

    firehose = get_firehose_client()
    
    response = firehose.put_record_batch(DeliveryStreamName=&quot;test-firehose-es-poc&quot;,Records=records)
    print(response)

def main():
    test_data_list = [
            {
                &quot;user_id&quot;: &quot;Aster-Kotlin-Sapphire-564&quot;,
                &quot;app_version&quot;: &quot;v1.5.16(90)&quot;,
                &quot;device_id&quot;: &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;,
                &quot;device_manufacturer&quot;: &quot;LG&quot;, &quot;device_name&quot;: &quot;LG G7 ThinQ&quot;, &quot;device_model&quot;: &quot;LM-G710N&quot;, &quot;device_os&quot;: &quot;Android&quot;, &quot;device_os_number&quot;: &quot;8.0&quot;,
                &quot;event&quot;: &quot;interest_service_click&quot;,
                &quot;interest_id&quot;: 1101,
                &quot;index&quot;: 1,
                &quot;interest_name&quot;: &quot;초등학교&quot;, &quot;interest_service_id&quot;: None, &quot;interest_service_type&quot;: &quot;물어봐요&quot;,&quot;interest_service_name&quot;: &quot;대나무숲&quot;,
                &quot;timestamp&quot;: &quot;2019-05-03T00:20:00Z&quot;
            },
            {
                &quot;user_id&quot;: &quot;Aster-Kotlin-Sapphire-564&quot;,
                &quot;app_version&quot;: &quot;v1.5.16(90)&quot;,
                &quot;device_id&quot;: &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;,
                &quot;device_manufacturer&quot;: &quot;LG&quot;, &quot;device_name&quot;: &quot;LG G7 ThinQ&quot;, &quot;device_model&quot;: &quot;LM-G710N&quot;, &quot;device_os&quot;: &quot;Android&quot;, &quot;device_os_number&quot;: &quot;8.0&quot;,
                &quot;event&quot;: &quot;interest_service_click&quot;,
                &quot;interest_id&quot;: 1301,
                &quot;index&quot;: 1,
                &quot;interest_name&quot;: &quot;취업&quot;, &quot;interest_service_id&quot;: None, &quot;interest_service_type&quot;: &quot;배워봐요&quot;,&quot;interest_service_name&quot;: &quot;학원&quot;,
                &quot;timestamp&quot;: &quot;2019-05-03T00:50:00Z&quot;
            },
            {
                &quot;user_id&quot;: &quot;Aster-Kotlin-Sapphire-564&quot;,
                &quot;app_version&quot;: &quot;v1.5.16(90)&quot;,
                &quot;device_id&quot;: &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;,
                &quot;device_manufacturer&quot;: &quot;LG&quot;, &quot;device_name&quot;: &quot;LG G7 ThinQ&quot;, &quot;device_model&quot;: &quot;LM-G710N&quot;, &quot;device_os&quot;: &quot;Android&quot;, &quot;device_os_number&quot;: &quot;8.0&quot;,
                &quot;event&quot;: &quot;interest_service_click&quot;,
                &quot;interest_id&quot;: 1201,
                &quot;index&quot;: 1,
                &quot;interest_name&quot;: &quot;창업/스타트업&quot;, &quot;interest_service_id&quot;: None, &quot;interest_service_type&quot;: &quot;2&quot;,&quot;interest_service_name&quot;: &quot;piano&quot;,
                &quot;timestamp&quot;: &quot;2019-05-03T01:15:00Z&quot;
            },
            {
                &quot;user_id&quot;: &quot;Aster-Kotlin-Sapphire-564&quot;,
                &quot;app_version&quot;: &quot;v1.5.16(90)&quot;,
                &quot;device_id&quot;: &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;,
                &quot;device_manufacturer&quot;: &quot;LG&quot;,
                &quot;device_name&quot;: &quot;LG G7 ThinQ&quot;,
                &quot;device_model&quot;: &quot;LM-G710N&quot;,
                &quot;device_os&quot;: &quot;Android&quot;,
                &quot;device_os_number&quot;: &quot;8.0&quot;,
                &quot;event&quot;: &quot;interest_service_click&quot;,
                &quot;interest_id&quot;: 1201,
                &quot;index&quot;: 1,
                &quot;interest_name&quot;: &quot;창업/스타트업&quot;,
                &quot;interest_service_id&quot;: None,
                &quot;interest_service_type&quot;: &quot;2&quot;,
                &quot;interest_service_name&quot;: &quot;piano&quot;,
                &quot;timestamp&quot;: &quot;2019-04-30T07:30:00Z&quot;
            }
        ]
    
	batch_record_to_delivery_stream(test_data_list)

if __name__ == &quot;__main__&quot;:
    main()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드를 실행하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3 main.py
Put multiple records to Deliver Stream
{'FailedPutCount': 0, 'Encrypted': False, 'RequestResponses': [{'RecordId': 'JvtN3+H/2oeKA6g087JPipW+g8STzCQQp50mcIw5FQ0wQIC2EihXrB1C31kMjNXY0lcQvXo6bn3H1O/PQMWI3veWxxCb9vkL3lieblJOu+v/q8TLAlsfNCsMADGz9yPLQg4B5uRfogNKv1+M44c6RnAHIg+n5aX/K8UUgbVVF47ZeyiJsokbshNmhO7F8+3BA4rAdXW2O4hSZj640O0RAtw6QuTB3CQN'}, {'RecordId': 'JT+5YNtI/3nwtCiiaoA/w5pBxkHYdbJFwGv8KiYDk7cTjIhenCGmnlBZqpwDswVWNGdnTT+e/qEP3VQI2dx1cwjHDpRRlilNBOYwKZaueoazeQ77p2NKgarweztvVVK1r91PjIlEUlW3fJfSAqiZsCoa6NQDs3u51gRNxi8Z9iBA/3uUXDehUkszxmlIzpvFKmrYrJ6UGIdBDHIpyqmWYdCAwAXJJTBk'}, {'RecordId': 'Mriv4BFuAEpziVO0hX0zZsoCspb8Sl4fdTOUitqYYTKGhfr+7noUWfYTTp0QF0JkuS8z/KHEr8aiV53IrLe860NzZY1mSN4ZAxmIKLxQqwQceFaj0xEBJJuYjrSOuDKRVD3rCz8n/Ab4QzEP/FOrUioKK7uf4kySsE7TvTkW1pWeKHabE27FjK/+9x4//3ep3fjp5K3TO81UX6Xk7AFa5BxiGUjVzcTI'}], 'ResponseMetadata': {'RequestId': 'c59f84d4-d42a-432f-9042-d44926133eb6', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amzn-requestid': 'c59f84d4-d42a-432f-9042-d44926133eb6', 'x-amz-id-2': '01OYNLqVZ9T7VGgpQ/pSJ1MtwblA5/kShluUDM6sLzv4ncJEyTrM7lHoKxEwo1EWzbXZmIu7Nz0oaw72UhQhAzAl3Ji9BgqZ', 'content-type': 'application/x-amz-json-1.1', 'content-length': '779', 'date': 'Mon, 26 Aug 2019 03:13:32 GMT'}, 'RetryAttempts': 0}}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실제 Amazon elasticsearch에서 레코드가 입력되었는지 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -XGET https://{es_address}/interest_service_click2/_search\?filter_path\=hits\&amp;amp;format\=json\&amp;amp;pretty
{
  &quot;hits&quot; : {
    &quot;total&quot; : 4,
    &quot;max_score&quot; : 1.0,
    &quot;hits&quot; : [
      {
        &quot;_index&quot; : &quot;interest_service_click2&quot;,
        &quot;_type&quot; : &quot;isc&quot;,
        &quot;_id&quot; : &quot;49595937143545169094912246787272632161781037484956712962.0&quot;,
        &quot;_score&quot; : 1.0,
        &quot;_source&quot; : {
          &quot;user_id&quot; : &quot;Aster-Kotlin-Sapphire-564&quot;,
          &quot;app_version&quot; : &quot;v1.5.16(90)&quot;,
          &quot;device_id&quot; : &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;,
          &quot;device_manufacturer&quot; : &quot;LG&quot;,
          &quot;device_name&quot; : &quot;LG G7 ThinQ&quot;,
          &quot;device_model&quot; : &quot;LM-G710N&quot;,
          &quot;device_os&quot; : &quot;Android&quot;,
          &quot;device_os_number&quot; : &quot;8.0&quot;,
          &quot;event&quot; : &quot;interest_service_click&quot;,
          &quot;interest_id&quot; : 1201,
          &quot;index&quot; : 1,
          &quot;interest_name&quot; : &quot;창업/스타트업&quot;,
          &quot;interest_service_id&quot; : null,
          &quot;interest_service_type&quot; : &quot;2&quot;,
          &quot;interest_service_name&quot; : &quot;piano&quot;,
          &quot;timestamp&quot; : &quot;2019-05-03T01:15:00Z&quot;
        }
      },
      {
        &quot;_index&quot; : &quot;interest_service_click2&quot;,
        &quot;_type&quot; : &quot;isc&quot;,
        &quot;_id&quot; : &quot;49595937143545169094912246787271423235961422855782006786.0&quot;,
        &quot;_score&quot; : 1.0,
        &quot;_source&quot; : {
          &quot;user_id&quot; : &quot;Aster-Kotlin-Sapphire-564&quot;,
          &quot;app_version&quot; : &quot;v1.5.16(90)&quot;,
          &quot;device_id&quot; : &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;,
          &quot;device_manufacturer&quot; : &quot;LG&quot;,
          &quot;device_name&quot; : &quot;LG G7 ThinQ&quot;,
          &quot;device_model&quot; : &quot;LM-G710N&quot;,
          &quot;device_os&quot; : &quot;Android&quot;,
          &quot;device_os_number&quot; : &quot;8.0&quot;,
          &quot;event&quot; : &quot;interest_service_click&quot;,
          &quot;interest_id&quot; : 1301,
          &quot;index&quot; : 1,
          &quot;interest_name&quot; : &quot;취업&quot;,
          &quot;interest_service_id&quot; : null,
          &quot;interest_service_type&quot; : &quot;배워봐요&quot;,
          &quot;interest_service_name&quot; : &quot;학원&quot;,
          &quot;timestamp&quot; : &quot;2019-05-03T00:50:00Z&quot;
        }
      },
      {
        &quot;_index&quot; : &quot;interest_service_click2&quot;,
        &quot;_type&quot; : &quot;isc&quot;,
        &quot;_id&quot; : &quot;49595937143545169094912246787270214310141808226607300610.0&quot;,
        &quot;_score&quot; : 1.0,
        &quot;_source&quot; : {
          &quot;user_id&quot; : &quot;Aster-Kotlin-Sapphire-564&quot;,
          &quot;app_version&quot; : &quot;v1.5.16(90)&quot;,
          &quot;device_id&quot; : &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;,
          &quot;device_manufacturer&quot; : &quot;LG&quot;,
          &quot;device_name&quot; : &quot;LG G7 ThinQ&quot;,
          &quot;device_model&quot; : &quot;LM-G710N&quot;,
          &quot;device_os&quot; : &quot;Android&quot;,
          &quot;device_os_number&quot; : &quot;8.0&quot;,
          &quot;event&quot; : &quot;interest_service_click&quot;,
          &quot;interest_id&quot; : 1101,
          &quot;index&quot; : 1,
          &quot;interest_name&quot; : &quot;초등학교&quot;,
          &quot;interest_service_id&quot; : null,
          &quot;interest_service_type&quot; : &quot;물어봐요&quot;,
          &quot;interest_service_name&quot; : &quot;대나무숲&quot;,
          &quot;timestamp&quot; : &quot;2019-05-03T00:20:00Z&quot;
        }
      },
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;백업용 s3 데이터를 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ aws s3 ls s3://test-es-raw-poc/2019/08/26/03/
2019-08-26 12:14:35       1528 test-firehose-es-poc-1-2019-08-26-03-13-33-dd434742-87da-4cbe-b62a-b84c0366215f

$ aws s3 cp s3://test-es-raw-poc/2019/08/26/03/test-firehose-es-poc-1-2019-08-26-03-13-33-dd434742-87da-4cbe-b62a-b84c0366215f ~/dev/boto3_test/kinesis_data_firehose/multiple_record.txt
download: s3://test-es-raw-poc/2019/08/26/03/test-firehose-es-poc-1-2019-08-26-03-13-33-dd434742-87da-4cbe-b62a-b84c0366215f to dev/boto3_test/kinesis_data_firehose/multiple_record.txt

$ cat dev/boto3_test/kinesis_data_firehose/multiple_record.txt
{&quot;user_id&quot;: &quot;Aster-Kotlin-Sapphire-564&quot;, &quot;app_version&quot;: &quot;v1.5.16(90)&quot;, &quot;device_id&quot;: &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;, &quot;device_manufacturer&quot;: &quot;LG&quot;, &quot;device_name&quot;: &quot;LG G7 ThinQ&quot;, &quot;device_model&quot;: &quot;LM-G710N&quot;, &quot;device_os&quot;: &quot;Android&quot;, &quot;device_os_number&quot;: &quot;8.0&quot;, &quot;event&quot;: &quot;interest_service_click&quot;, &quot;interest_id&quot;: 1101, &quot;index&quot;: 1, &quot;interest_name&quot;: &quot;초등학교&quot;, &quot;interest_service_id&quot;: null, &quot;interest_service_type&quot;: &quot;물어봐요&quot;, &quot;interest_service_name&quot;: &quot;대나무숲&quot;, &quot;timestamp&quot;: &quot;2019-05-03T00:20:00Z&quot;}
{&quot;user_id&quot;: &quot;Aster-Kotlin-Sapphire-564&quot;, &quot;app_version&quot;: &quot;v1.5.16(90)&quot;, &quot;device_id&quot;: &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;, &quot;device_manufacturer&quot;: &quot;LG&quot;, &quot;device_name&quot;: &quot;LG G7 ThinQ&quot;, &quot;device_model&quot;: &quot;LM-G710N&quot;, &quot;device_os&quot;: &quot;Android&quot;, &quot;device_os_number&quot;: &quot;8.0&quot;, &quot;event&quot;: &quot;interest_service_click&quot;, &quot;interest_id&quot;: 1301, &quot;index&quot;: 1, &quot;interest_name&quot;: &quot;취업&quot;, &quot;interest_service_id&quot;: null, &quot;interest_service_type&quot;: &quot;배워봐요&quot;, &quot;interest_service_name&quot;: &quot;학원&quot;, &quot;timestamp&quot;: &quot;2019-05-03T00:50:00Z&quot;}
{&quot;user_id&quot;: &quot;Aster-Kotlin-Sapphire-564&quot;, &quot;app_version&quot;: &quot;v1.5.16(90)&quot;, &quot;device_id&quot;: &quot;a03cd3d6-0b14-46e1-a2c8-18b1c86cf738&quot;, &quot;device_manufacturer&quot;: &quot;LG&quot;, &quot;device_name&quot;: &quot;LG G7 ThinQ&quot;, &quot;device_model&quot;: &quot;LM-G710N&quot;, &quot;device_os&quot;: &quot;Android&quot;, &quot;device_os_number&quot;: &quot;8.0&quot;, &quot;event&quot;: &quot;interest_service_click&quot;, &quot;interest_id&quot;: 1201, &quot;index&quot;: 1, &quot;interest_name&quot;: &quot;창업/스타트업&quot;, &quot;interest_service_id&quot;: null, &quot;interest_service_type&quot;: &quot;2&quot;, &quot;interest_service_name&quot;: &quot;piano&quot;, &quot;timestamp&quot;: &quot;2019-05-03T01:15:00Z&quot;}%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 결과는 다음과 같이 정리할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Boto3를 이용하여 다중 레코드를 firehose에 전송한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Amazon elasticsearch의 index와 S3의 백업 데이터를 확인한 결과 다중 레코드가 정상적으로 전송된 것을 확인할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andro</name><email>seongwoo.dev@gmail.com</email></author><category term="Boto3" /><category term="AWS_S3" /><category term="AWS_Kinesis_firehose" /><summary type="html">AWS를 Python 개발환경에서 사용하기 위한 방법중 하나는 Boto3 라이브러리를 이용하는 것이다. 이 테스트는 Boto3를 이용하여 아래의 서비스에 접근하여 사용하는 방법을 공유하기 위한 목적이 있다.</summary></entry><entry><title type="html">New Relic 교육 - 오버뷰</title><link href="http://localhost:4000/monitoring/newrelic_basic/" rel="alternate" type="text/html" title="New Relic 교육 - 오버뷰" /><published>2019-12-13T00:00:00+09:00</published><updated>2019-12-13T00:00:00+09:00</updated><id>http://localhost:4000/monitoring/newrelic_basic</id><content type="html" xml:base="http://localhost:4000/monitoring/newrelic_basic/">&lt;h1 id=&quot;문서목적&quot;&gt;문서목적&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://newrelic.com/&quot;&gt;New Relic&lt;/a&gt;에서 제공하는 기능에 대한 간단한 오버뷰 교육과 관련되어 사전 학습 내용과 교육 내용 일부를 개인적으로 정리한 문서이다.&lt;br /&gt;
New Relic 전반적인 내용을 다루는 상세 문서가 아니므로 정확하고, 구체적인 내용은 &lt;a href=&quot;https://newrelic.com/&quot;&gt;New Relic 공식 사이트&lt;/a&gt;나 다른 자료를 확인하도록 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;new-relic이-말하는-new-relic오버뷰&quot;&gt;New Relic이 말하는 New Relic(오버뷰)&lt;/h1&gt;

&lt;p&gt;New Relic에서 제공하는 다양한 제품을 통해 데이터 기반 분석과 대응이 가능하다.&lt;/p&gt;

&lt;h2 id=&quot;new-relic-활용&quot;&gt;New Relic 활용&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;애플리케이션 및 관련 인프라스트럭처의 모니터링 데이터를 같이 확인할 수 있어 문제 확인 시간을 단축할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;애플리케이션/서비스의 code flow 기반 추적이 가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;대시보드를 통해 가시적인 데이터 확인과 공통 대시보드를 통해 관련 팀원들이 동일한 뷰로 문제를 바라볼 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;New Relic query language(NRQL)를 사용하여 데이터를 살펴볼 수 있으며, 직관적으로 대시보드를 구성하는 것이 가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CloudWatch가 제공하는 모니터링 기능 이상의 기능을 통해 좀더 상세한 서비스 분석과 기능, 비기능 관련 원인 추적이 가능하다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;agent-방식&quot;&gt;Agent 방식&lt;/h2&gt;

&lt;p&gt;New Relic은 기본적으로 Agent 방식으로 모니터링을 위한 데이터를 수집한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;APM agent&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Infrastructure agent&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Application과 Application 관련 호스트(서버)의 정보와 연결성을 대략적으로 확인 가능하여, 앱이 설치된 호스트이 상태와 앱의 전반적인 상태 정보를 같이 볼 수 있다.&lt;br /&gt;
인프라 모니터링은 인프라스트럭처 에이전트 설치하여 사용&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ssh접근, 패키지 설치 등과 같은 사용자 행위에 대한 추적도 가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;동일 세션에서 어떤 작업이 있었는지 시간대별로 추적 가능.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Service Map&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;설치된 Agent를 통해 front - back - storage 와 같은 서비스 레이어에 다른 의존성관계를 파악할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서비스별 맵을 만들어서 특정 서비스 경로에 대해 모니터링 하는 것도 가능하다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;new-relic-products&quot;&gt;New Relic Products&lt;/h1&gt;

&lt;p&gt;크게 6가지 제품으로 나누어진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://newrelic.com/products/application-monitoring&quot;&gt;New Relic - APM&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://newrelic.com/products/browser-monitoring&quot;&gt;New Relic - Browser&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://newrelic.com/products/infrastructure&quot;&gt;New Relic - Infrastructure&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://newrelic.com/products/insights&quot;&gt;New Relic - Insights&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://newrelic.com/products/mobile-monitoring&quot;&gt;New Relic - Mobile&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://newrelic.com/products/synthetics&quot;&gt;New Relic - Synthetics&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;new-relic---apm&quot;&gt;&lt;a href=&quot;https://newrelic.com/products/application-monitoring&quot;&gt;New Relic - APM&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;SaaS 기반 APM 툴을 제공한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;관리 목적으로 논리적 그룹을 구성하여 관리할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;개발 언어별(Java, .Net, Python, Ruby, Node.js 등) 모니터링 뿐만 아니라 다양한 프레임워크(framework)에 대하여 지원한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;특정 코드 세그먼트 및 SQL문이 애플리케이션 혹은 서비스 성능에 영향을 주는지 drill-down 확인이 가능하다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;코드레벨 트랜잭션 : ex&amp;gt; xx.jsp app code processing time&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;호출 과정에 대하여 원하는 클래스, 메소드 레벨 추적이 가능하다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;thread profiler 지원&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;new-relic---browser&quot;&gt;&lt;a href=&quot;https://newrelic.com/products/browser-monitoring&quot;&gt;New Relic - Browser&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;백엔드, 페이지로드 또는 그 외에서 발생하는 고객 경험 및 성능 관련 문제를 확인하고 진단하는데 도움을 준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;브라우저 버전 및 사용자 기기 유형 등 브라우저 유형별로 프런트엔드 성능 분류를 확인할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자의 지리적 위치(도시)까지 파악하여 최종 사용자에 대한 경험 분석을 지원한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Session Trace를 활용하여 서비스를 위한 resource(이미지, css 등) 로딩, AJAX 요청, 사용자 상호작용에 대하여 시간축을 기준으로 시각화하여 확인할 수 있는 기능을 제공한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;요청 대기열, 앱 코드, 네트워크 대기시간, DOM 처리 및 페이지 렌더링 별로 각 페이지의 로드시간 성능을 분석할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;new-relic---infrastructure&quot;&gt;&lt;a href=&quot;https://newrelic.com/products/infrastructure&quot;&gt;New Relic - Infrastructure&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;기본적으로 인프라 전반의 호스트 및 인스턴스의 기본정보에 대한 모니터링이을 지원한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://newrelic.com/&quot;&gt;New Relic&lt;/a&gt;은 (AWS, Docker, Bare Metal 또는 위 모든 인프라 등) 다양한 인프라 전반에 걸쳐 호스트에 대한 모든 지표 및 이벤트에 대해 실시간으로 가시성을 제공한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;New Relic은 빠른 확장, 스마트한 배포, 사전 모니터링을 수월하게 이행할 수 있도록 지원한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;주요 호스트 상태 지표 (CPU, 메모리, 디스크, 네트워크) 5 초마다 새로 고침&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;커스터 쿼리와 태그기반 경고 및 대시보드를 통한 관리&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;라벨, 이미지 및 기타 메타데이터 별 Docker 컨테이너 분할&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AWS EC2와 긴밀하게 통합되어 EC2 관련되어 다양한 모니터링이 기능하다.&lt;br /&gt;
New Relic Infrastructure Essentials 및 Pro는 Amazon EC2와 Docker에 대한 기본 지원과 함께 제공된다.&lt;br /&gt;
New Relic Infrastructure Pro는 다음과 같은 인기 있는 AWS 서비스에 대하여 기본 모니터링의 확장형 서비스를 제공한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;AWS IAM&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Amazon CloudFront&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Amazon DynamoDB&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Amazon EBS&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AWS Route 53&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AWS ElastiCache&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AWS Elastic Load Balancing&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AWS Elasticsearch&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AWS Kinesis&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Amazon Kinesis Firehose&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Amazon SNS&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Amazon RDS&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Amazon ECR&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Amazon SQS&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Amazon VPC&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Amazon ECS&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이러한 통합서비스를 통해 AWS사용량을 쉽게 보고 이해할 수 있다.&lt;br /&gt;
즉, AWS지출 분석,분기별 예산 검토 또는 전망 준비, 서비스 확장에 따른 영향 평가 또는 사용량과 데이터 흐름의 급등 및 급락 파악 등이 가능하기 때문에 AWS 인프라 및 앱관리를 미세조정할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;new-relic---insights&quot;&gt;&lt;a href=&quot;https://newrelic.com/products/insights&quot;&gt;New Relic - Insights&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;New Relic의 실시간 분석 플랫폼이다.&lt;br /&gt;
New Relic query language(NRQL)를 사용하여 New Relic으로 수집된 데이터에 대하여 질의가 가능하다.&lt;br /&gt;
쿼리 결과를 그래프로 가시화 하고 대시보드에 포함시키는 것이 가능하다.&lt;br /&gt;
코호트(cohort) 분석, 퍼널(funnel) 분석이 가능하다.&lt;/p&gt;

&lt;p&gt;New Relic query language(NRQL)의 기본 기능&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;조회 조건 필터링 설정&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;결과 버킷팅(bucket) 지원&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;히스토그램&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;조회 결과와 필터링을 그래프와 연동&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;new-relic---mobile&quot;&gt;&lt;a href=&quot;https://newrelic.com/products/mobile-monitoring&quot;&gt;New Relic - Mobile&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;앱에 대한 사용자 활동 분석&lt;br /&gt;
앱 크래시 리포트 : 관련 지표, 빈도, 스택트레이스&lt;br /&gt;
크래시 발생시 이메일 알림등 연동&lt;/p&gt;

&lt;h2 id=&quot;new-relic---synthetics&quot;&gt;&lt;a href=&quot;https://newrelic.com/products/synthetics&quot;&gt;New Relic - Synthetics&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;사전 모니터링, 테스팅에 대한 용도로 활용할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;기타-교육중-확인한-내용&quot;&gt;기타 교육중 확인한 내용&lt;/h2&gt;

&lt;p&gt;다음은 기타 교육 설명에서 확인한 내용이나 질문을 통해 확인한 내용들이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;기본적으로 New Relic은 Agent 설치가 필요하다. 다양한 용도의 agent를 지원하는 것으로 보인다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;NRQL(New Relic Query Language)는 SQL과 유사하게 보일 수 있으나 일반적인 SQL이 아니다. 표준 ANSI SQL과 동일한 수준의 질의 기능을 제공하는 것은 아니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;모니터링 데이터는 timestamp에 대한 처리는 기본적으로 UTC 기반이며, New Relic query나 New Relic 관리 console에서 timezone을 설정할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Permalink 정보를 선택하여 전달하면 문의 대응에 더 좋다. Permalink에는 조회 시간범위까지 포함되어 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;커스텀 메트릭을 New Relic쪽으로 적재(insert)하는 것이 가능하며, 적재 요청시 insert용 api key를 사용하여 적재한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CloudWatch로 전달되는 aws resource 서비스 메트릭을 New Relic쪽으로 가져와서 활용할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서비스 코드에 New Relic쪽으로 데이터를 수집하기 위한 용도의 코드를 심어서 데이터 수집, 분석이 가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;로컬 Browser단에 JavaScript를 추가하여 테스트 목적의 데이터를 수집하여 볼 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서비스 응답시간 기준으로 satisfied, tolerating, frustrated 버킷으로 나누어 메트릭을 분류할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서비스 DB query 분석과 힌트(가이드) 제공 기능을 일부 포함하고 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;time marking : 어느 시점에 중요하게 어떤 이벤트가 있었는지 표시를 하여 지표 분석이나 가시화 처리에 도움을 줄 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;New Relic Alarm은 by policy, by condition, by condition and entity 3가지 형태로 동작 방식이 나누어질 수 있으며, 각 방식에 따른 동작방식을 잘 이해하고 사용해야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;New Relic Alarm은 Amazon CloudWatch의 Alarm과 유사하게 특정조건을 만족하여 최초 알람이 발생한 이후, 동일한 조건을 만족하는 알람 상황이 지속되는 경우 동일 알람 설정으로 다시 알람 액션이 발생하지는 않는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;참고자료&quot;&gt;참고자료&lt;/h1&gt;

&lt;p&gt;New Relic에 대한 최신 한글자료는 검색이 잘 안된다. 사이트문서와 YouTube - New Relic 채널의 자료를 참고하는 것이 좋을 것으로 보인다.&lt;br /&gt;
공식 사이트 문서&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://newrelic.com/&quot;&gt;New Relic site&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.newrelic.com/&quot;&gt;New Relic Documents&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;APM: &lt;a href=&quot;https://docs.newrelic.com/docs/apm/new-relic-apm/guides/new-relic-apm-best-practices-guide&quot;&gt;https://docs.newrelic.com/docs/apm/new-relic-apm/guides/new-relic-apm-best-practices-guide&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Browser: &lt;a href=&quot;https://docs.newrelic.com/docs/browser/new-relic-browser/guides/new-relic-browser-best-practices-guide&quot;&gt;https://docs.newrelic.com/docs/browser/new-relic-browser/guides/new-relic-browser-best-practices-guide&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mobile: &lt;a href=&quot;https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile/guides/new-relic-mobile-best-practices-guide&quot;&gt;https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile/guides/new-relic-mobile-best-practices-guide&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Insights: &lt;a href=&quot;https://docs.newrelic.com/docs/insights/use-insights-ui/guides/new-relic-insights-best-practices-guide&quot;&gt;https://docs.newrelic.com/docs/insights/use-insights-ui/guides/new-relic-insights-best-practices-guide&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Synthetics: &lt;a href=&quot;https://docs.newrelic.com/docs/synthetics/new-relic-synthetics/getting-started/new-relic-synthetics&quot;&gt;https://docs.newrelic.com/docs/synthetics/new-relic-synthetics/getting-started/new-relic-synthetics&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Infrastructure: &lt;a href=&quot;https://docs.newrelic.com/docs/infrastructure/new-relic-infrastructure/guides/new-relic-infrastructure-best-practices-guide&quot;&gt;https://docs.newrelic.com/docs/infrastructure/new-relic-infrastructure/guides/new-relic-infrastructure-best-practices-guide&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andro</name><email>seongwoo.dev@gmail.com</email></author><category term="Newrelic" /><category term="Monitoring" /><summary type="html">New Relic에서 제공하는 기능에 대한 간단한 오버뷰 교육과 관련되어 사전 학습 내용과 교육 내용 일부를 개인적으로 정리한 문서이다.</summary></entry><entry><title type="html">Python logging을 활용해 Flask에서 logging하는 방법</title><link href="http://localhost:4000/logging/flask_logging/" rel="alternate" type="text/html" title="Python logging을 활용해 Flask에서 logging하는 방법" /><published>2019-12-13T00:00:00+09:00</published><updated>2019-12-13T00:00:00+09:00</updated><id>http://localhost:4000/logging/flask_logging</id><content type="html" xml:base="http://localhost:4000/logging/flask_logging/">&lt;h1 id=&quot;flask-logging-하는-방법&quot;&gt;Flask Logging 하는 방법&lt;/h1&gt;

&lt;h2 id=&quot;python-logging-모듈을-사용하여-로그를-남겨봅시다&quot;&gt;python logging 모듈을 사용하여 로그를 남겨봅시다.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;logging 모듈은 python에서 기본으로 제공하는 library입니다. 따라서 pip로 따로 설치할 필요가 없습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;가장 기본적인 방식은 아래와 같습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from flask import Flask
import logging
 
logging.basicConfig(filename = &quot;logs/project.log&quot;, level = logging.DEBUG)
application=Flask(__name__)
 
@application.route(&quot;/&quot;)
def hello():
	return &quot;hello&quot;
  

if __name__==&quot;__main__&quot;:
    application.run(host=&quot;0.0.0.0&quot;, debug=True) 


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;basicConfig 안에 filename은 로그파일을 저장할 경로입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;level은 CRITICAL, ERROR, WARNING, INFO, DEBUG 가 있습니다. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CRITICAL로 지정하면 CRITICAL한 상황일 때만 로그로 기록됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WARNING로 지정하면 CRITICAL, ERROR, WARNING한 상황일 때만 로그로 기록됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위 처럼 설정했을 때 아래와 같이 로그가 남게됩니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;INFO:werkzeug:127.0.0.1 - - [14/Feb/2019 14:40:42] ”POST /{project}/api/v1.0/test HTTP/1.1” 200 -&lt;/p&gt;

&lt;p&gt;INFO:werkzeug: * Detected change in ’/{project_path}/app.py’, reloading&lt;/p&gt;

&lt;p&gt;INFO:werkzeug: * Restarting with stat&lt;/p&gt;

&lt;p&gt;WARNING:werkzeug: * Debugger is active!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;위 로그는 내가 원하는 정보가 아닐 수 있습니다. 로그를 남길때 원하는 정보만 남기고 싶다면 커스텀하면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import logging
import datetime
from pytz import timezone

logging.basicConfig(filename = &quot;logs/test.log&quot;, level = logging.DEBUG)

def log(request, message):
    log_date = get_log_date()
    log_message = &quot;{0}/{1}/{2}&quot;.format(log_date, str(request), message)
    logging.info(log_message)
def error_log(request, error_code, error_message):
    log_date = get_log_date()
    log_message = &quot;{0}/{1}/{2}/{3}&quot;.format(log_date, str(request), error_code, error_message)
    logging.info(log_message)

def get_log_date():
    dt = datetime.datetime.now(timezone(&quot;Asia/Seoul&quot;))
    log_date = dt.strftime(&quot;%Y%m%d_%H:%M:%S&quot;)
    return log_date


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;위에서 커스텀한 로그를 사용하면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from flask import Flask
import log


logging.basicConfig(filename = &quot;logs/test.log&quot;, level = logging.DEBUG)
application=Flask(__name__)


@application.route(&quot;/&quot;)
def hello():
	log.log(request, &quot;hello route&quot;)
	return &quot;hello&quot;
  

if __name__==&quot;__main__&quot;:
    application.run(host=&quot;0.0.0.0&quot;, debug=True) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;실행을 하면 아래와 같이 원하는 정보를 남길 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;INFO:werkzeug: * Restarting with stat&lt;/p&gt;

&lt;p&gt;WARNING:werkzeug: * Debugger is active!&lt;/p&gt;

&lt;p&gt;INFO:werkzeug: * Debugger PIN: 137-884-933&lt;/p&gt;

&lt;p&gt;INFO:root:20190218_16:08:42/&amp;lt;Request ’&lt;a href=&quot;http://localhost:5000/project/api/v1.0/test&quot;&gt;http://localhost:5000/project/api/v1.0/test&lt;/a&gt;‘ [POST]&amp;gt;/&lt;/p&gt;

&lt;p&gt;INFO:root:20190218_16:08:51/&amp;lt;Request ’&lt;a href=&quot;http://localhost:5000/project/api/v1.0/test&quot;&gt;http://localhost:5000/projectct/api/v1.0/test&lt;/a&gt;‘ [POST]&amp;gt;/500/(17, ’File exists’)
`
INFO:werkzeug:127.0.0.1 - - [18/Feb/2019 16:08:51] ”POST /project/api/v1.0/test HTTP/1.1” 500 -&lt;/p&gt;

&lt;p&gt;INFO:werkzeug: * Detected change in ’/Users/ns/project/project_ml/project.py’, reloading`&lt;/p&gt;</content><author><name>Andro</name><email>seongwoo.dev@gmail.com</email></author><category term="Python" /><category term="Logging" /><category term="Flask" /><summary type="html">Flask Logging 하는 방법</summary></entry><entry><title type="html">Django framework를 이용해 게시판 만들고 AWS에 배포하기</title><link href="http://localhost:4000/django/django_make_board/" rel="alternate" type="text/html" title="Django framework를 이용해 게시판 만들고 AWS에 배포하기" /><published>2019-12-13T00:00:00+09:00</published><updated>2019-12-13T00:00:00+09:00</updated><id>http://localhost:4000/django/django_make_board</id><content type="html" xml:base="http://localhost:4000/django/django_make_board/">&lt;h1 id=&quot;문서-목적&quot;&gt;문서 목적&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;이 문서는 Django, python을 모르는 개발자를 대상으로 작성했으며 추후 다른 사람이 개발 할 경우 시행착오를 줄이는데 도움을 주기 위하여 작성하였다.&lt;/p&gt;

&lt;p&gt;처음 배울 때 겪었던 시행착오와 찾아봤던 정보들, 사이트를 중심으로 기술하였다.&lt;/p&gt;

&lt;p&gt;장고를 배우기 위해 토이프로젝트를 진행했으며 프로젝트의 목적은 Django와 AWS를 이용해 상용화 서버를 만드는 것이며 기능 구현 후 Test code도 작성했다.&lt;/p&gt;

&lt;h1 id=&quot;토이-프로젝트-환경-및-구조&quot;&gt;토이 프로젝트 환경 및 구조&lt;/h1&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;1-개발-환경&quot;&gt;1. 개발 환경&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;MacOS Mojave 10.14.2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Python 3.6.7&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nginx/1.14.0&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Django 2.1.4&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;uWSGI 2.0.17.1&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MySQL 5.6.41&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AWS&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;EC2 ubuntu 18.04 LTS&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;RDS- MySQL 5.6.41&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-서버-구조&quot;&gt;2. 서버 구조&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;서버&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the web client &amp;lt;-&amp;gt; the web server &amp;lt;-&amp;gt; the socket &amp;lt;-&amp;gt; uwsgi &amp;lt;-&amp;gt; Django&lt;/p&gt;

&lt;p&gt;브라우저 요청 -&amp;gt; 정적인 페이지/파일은 nginx에서 응답 / 동적데이터는 nginx -&amp;gt; uWSGI를 통해 django에서 처리&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/make_board_image.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;진행-내용&quot;&gt;진행 내용&lt;/h1&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;게시판-기능-정의-및-db-모델&quot;&gt;게시판 기능 정의 및 DB 모델&lt;/h3&gt;

&lt;p&gt;토이프로젝트는 게시판 기능을 만드는 것을 목표로 하였으며 다음과 같은 기능을 구현하였다.&lt;/p&gt;

&lt;p&gt;회원가입 관련 기능&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt; 첫 화면에서 로그인이 되어 있지 않으면 로그인 화면 페이지&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt; 회원 가입&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt; 로그인, 로그아웃 &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;게시글 관련 기능&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt; 글 쓰기 기능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt; 글 삭제 기능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt; 글 편집 기능&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;댓글 관련 기능&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt; 댓글 작성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt; 댓글 삭제&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DB Model&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Post ( title, text, author, published_date)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Comment (author, text, published_date)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;로컬-환경에서-게시판-만들기&quot;&gt;로컬 환경에서 게시판 만들기&lt;/h3&gt;

&lt;p&gt;자세한 사항은 장고걸스 사이트(&lt;a href=&quot;https://tutorial.djangogirls.org/ko/&quot;&gt;https://tutorial.djangogirls.org/ko/&lt;/a&gt;) 참고해 게시판을 만들면 된다.  친절하게 세세하게 설명해주고 있어 처음 보기에 좋다고 생각된다.&lt;/p&gt;

&lt;p&gt;장고걸스에서 쓰는 버전은 구버전이라 url부분은 Django 공식 사이트의 튜토리얼을 참고하면 도움이 된다.(&lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/intro/tutorial01/&quot;&gt;https://docs.djangoproject.com/ko/2.1/intro/tutorial01/&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;urls 예시&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.urls import path
    
from . import views
    
urlpatterns = [
    path('', views.index, name = 'index'),
    path('&amp;lt;int:pk&amp;gt;/', views.post_detail, name = 'post_detail'),
    path('post/new/', views.post_new, name='post_new'),
    path('post/edit/&amp;lt;int:pk&amp;gt;/', views.post_edit, name='post_edit'),
    path('post/remove/&amp;lt;int:pk&amp;gt;/', views.post_remove, name='post_remove'),
    path('&amp;lt;int:pk&amp;gt;/comments/', views.add_comment_to_post, name = 'add_comment_to_post'),
    path('comments/&amp;lt;int:pk&amp;gt;/remove/', views.comment_remove, name = 'comment_remove'),
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Virturalenv 만들 때 예시&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Create : virtualenv .venv 

Activate : source .venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Python Class 관련 함수&lt;/p&gt;

&lt;p&gt;초기화 함수&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt; __init__ : 인스턴스를 만들 때 실행되는 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;문자열화 함수&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt; __str__ : 인스턴스 자체를 출력 할 때의 형식을 지정해주는 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;aws-프로젝트-배포하기&quot;&gt;AWS 프로젝트 배포하기&lt;/h3&gt;

&lt;p&gt;링크 (&lt;a href=&quot;https://nachwon.github.io/django-deploy-1-aws/&quot;&gt;https://nachwon.github.io/django-deploy-1-aws/&lt;/a&gt;)를 참고하되 다른 점만 서술한다.&lt;/p&gt;

&lt;p&gt;EC2에는 git을 통해 소스코드를 올렸다.&lt;/p&gt;

&lt;p&gt;링크는 pyvenv로 진행했으나 해당 프로젝트는 virtualenv를 이용해서 진행해 설정 부분이 다르다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;uwsgi 설치 후 되는지 명령어로 확인&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uwsgi --http :8000 --home /home/ubuntu/&amp;lt;project name&amp;gt;/.env --chdir /home/ubuntu/&amp;lt;project name&amp;gt;/&amp;lt;app name&amp;gt; -w mysite.wsgi 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;location /static 부분은 파이썬 명령어 collectstatic했을 때 static파일들이 모이는 곳으로 경로 설정을 해줘야 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;mysite.conf ( nginx 설정파일)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
    listen 80;
    server_name *.amazonaws.com;
    charset utf-8;
    client_max_body_size 128M;
    location / {
        uwsgi_pass      unix:///tmp/app.sock;
        include         uwsgi_params;
    }
    
    location /static {
        alias /home/ubuntu/&amp;lt;project name&amp;gt;/&amp;lt;app name&amp;gt;/static;
    }
    location /media {
        alias /home/ubuntu/&amp;lt;project name&amp;gt;/&amp;lt;app name&amp;gt;/media;
    }
    location / {
        uwsgi_pass  django;
        include /home/ubuntu/&amp;lt;project name&amp;gt;/uwsgi_params;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 파일을 sites-enabled 폴더넣어주고 default 파일 삭제한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;uwsgi.service&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[uwsgi]
    
chdir = /home/ubuntu/&amp;lt;project name&amp;gt;/&amp;lt;app name&amp;gt;
module = mysite.wsgi:application
home = /home/ubuntu/&amp;lt;project name&amp;gt;/.env
    
uid = ubuntu
gid = ubuntu
    
socket = /tmp/mysite.sock
chmod-socket = 666
chown-socket = ubuntu:ubuntu
    
enable-threads = true
master = true
vacuum = true
pidfile = /tmp/mysite.pid
logto = /home/ubuntu/&amp;lt;project name&amp;gt;/&amp;lt;app name&amp;gt;/@(exec://date +%%Y-%%m-%%d).log
log-reopen = true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;오류중에 uwsgi_prams 파일이 없어서 나는 오류가 있다. 해당 오류인지 확인하려면 etc/nginx/ 에서 확인 후 없다면 파일 생성 후 하단의 내용을 넣어주면 된다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uwsgi_param     QUERY_STRING            $query_string;
uwsgi_param     REQUEST_METHOD          $request_method;
uwsgi_param     CONTENT_TYPE            $content_type;
uwsgi_param     CONTENT_LENGTH          $content_length;
     
uwsgi_param     REQUEST_URI             $request_uri;
uwsgi_param     PATH_INFO               $document_uri;
uwsgi_param     DOCUMENT_ROOT           $document_root;
uwsgi_param     SERVER_PROTOCOL         $server_protocol;
uwsgi_param     UWSGI_SCHEME            $scheme;
     
uwsgi_param     REMOTE_ADDR             $remote_addr;
uwsgi_param     REMOTE_PORT             $remote_port;
uwsgi_param     SERVER_PORT             $server_port;
uwsgi_param     SERVER_NAME             $server_name;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;test-code&quot;&gt;Test code&lt;/h3&gt;

&lt;p&gt;코드 테스트는 시나리오를 통한 테스트(selenium)과 API 테스트(Django test tool)로 진행했다.&lt;/p&gt;

&lt;p&gt;참고했던 사이트와 만들었던 코드를 올려놓고 향후 테스트 관련 더 배우게 되면 추가하겠다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Selenium은 실제 서버에 접속을 해서 테스트를 진행하는 것이기 때문에 게시물 생성시 삭제까지 진행해야 안남는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;장고 테스트 툴은 테스트할때마다 새로 DB를 만들어서 진행해 게시물 관련 테스트를 하려면 setUp함수로 미리 로그인, 생성을 해줘야됨.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Selenium 웹드라이버는 맥, 유닉스가 다르고 AWS EC2에서 진행시 headless 옵션을 넣어야 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;selenium test&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import unittest
import time
    
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
    
    
class NewVisitorTest(unittest.TestCase):
    def setUp(self):
        self.browser = webdriver.Chrome('./chromedriver')
    def tearDown(self):
        self.browser.quit()
    
    def test_can_signup(self):
        self.browser.get('{AWS_EC2_IP}')
        time.sleep(2)
    
        # 회원가입한 아이디로 로그인을 한다
        self.browser.find_element_by_id('id_username').send_keys('testid1')
        self.browser.find_element_by_id('id_password').send_keys('tjddnekd1')
        self.browser.find_element_by_xpath(&quot;//input[@value='login']&quot;).click()
        time.sleep(2)
            
if __name__ == '__main__':
    unittest.main(warnings='ignore')
    
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Django API test&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.test import TestCase
from django.urls import resolve, reverse
from .views import index, post_new, post_remove
from django.http import HttpRequest
from .models import Post
from django.contrib.auth.models import User
from django.utils import timezone
    
# Create your tests here.
class HomePageTest(TestCase):
    def test_root_url_resolves_to_home_page_view(self):
        found = resolve('/')
        self.assertEqual(found.func, index)
            
    def test_not_login_home_redirect(self):
        response = self.client.get('')
        self.assertEqual(response.status_code, 302)
        self.assertEqual(response['location'], '/accounts/login')
        
    def test_login_home_redirect(self):
        self.user = User.objects.create_user(username='testuser', password='12345')
        self.assertEqual(User.objects.count(), 1)
    
        response = self.client.post('/accounts/login/', {'username':'testuser', 'password':'12345'})
        self.assertEqual(response.status_code, 302)
        self.assertEqual(response['location'], '/')
        
class PostPageTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='12345')
        self.client.login(username= 'testuser', password = '12345')
        self.assertEqual(User.objects.count(), 1)
            
        first_Post = Post()
        first_Post.text = 'first post text'
        first_Post.author = self.user
        first_Post.published_date = timezone.now()
        first_Post.pk = 1
        first_Post.save()
    
    def test_post_detail_template(self):
        response = self.client.get('/1/')
        self.assertTemplateUsed(response, 'board/post_detail.html')
        
    def test_post_new_template(self):
        response = self.client.get('/post/new/')
        self.assertEqual(response.status_code, 200)
        
    def test_post_delete(self):
        response = self.client.get(reverse(post_remove, args=[1, ]))
        self.assertEqual(response.status_code, 302)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;참고-자료-정리&quot;&gt;참고 자료 정리&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;게시판 작성 참고 자료&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://tutorial.djangogirls.org/ko/&quot;&gt;https://tutorial.djangogirls.org/ko/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/ko/2.1/intro/tutorial01/&quot;&gt;https://docs.djangoproject.com/ko/2.1/intro/tutorial01/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AWS 배포 참고 자료&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nachwon.github.io/django-deploy-1-aws/&quot;&gt;https://nachwon.github.io/django-deploy-1-aws/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TEST 참고 자료&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;TDD 관점에서의 간단한 테스트 코드 작성:  &lt;a href=&quot;https://wikidocs.net/11058&quot;&gt;https://wikidocs.net/11058&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클라우드 상에서 Selenium을 이용한 Django 기능 테스트 자동화: &lt;a href=&quot;https://www.pycon.kr/2016apac/program/37&quot;&gt;https://www.pycon.kr/2016apac/program/37&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파이썬에서 편하게 테스트 케이스 작성하기: &lt;a href=&quot;https://www.pycon.kr/2017/program/132&quot;&gt;https://www.pycon.kr/2017/program/132&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;유닛테스트를 작성하는 3가지 접근 방법: &lt;a href=&quot;http://americanopeople.tistory.com/285?category=567685&quot;&gt;http://americanopeople.tistory.com/285?category=567685&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Saving User Input: testing the database: &lt;a href=&quot;http://www.obeythetestinggoat.com/book/chapter_post_and_database.html&quot;&gt;http://www.obeythetestinggoat.com/book/chapter_post_and_database.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andro</name><email>seongwoo.dev@gmail.com</email></author><category term="Python" /><category term="Django" /><category term="AWS" /><category term="AWS_EC2" /><summary type="html">이 문서는 Django, python을 모르는 개발자를 대상으로 작성했으며 추후 다른 사람이 개발 할 경우 시행착오를 줄이는데 도움을 주기 위하여 작성하였다.</summary></entry><entry><title type="html">Python logging module 기초적인 사용법에 대한 학습</title><link href="http://localhost:4000/logging/python_logging_basic/" rel="alternate" type="text/html" title="Python logging module 기초적인 사용법에 대한 학습" /><published>2019-12-12T00:00:00+09:00</published><updated>2019-12-12T00:00:00+09:00</updated><id>http://localhost:4000/logging/python_logging_basic</id><content type="html" xml:base="http://localhost:4000/logging/python_logging_basic/">&lt;h1 id=&quot;목적&quot;&gt;목적&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;이 문서는 Python Logging 모듈에 대한 공식 문서 중 아래와 같은 내용을 정리하고 공유하기 위하여 작성했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.python.org/ko/3/howto/logging.html#logging-advanced-tutorial&quot;&gt;Logging HOWTO&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;튜토리얼&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.python.org/ko/3/library/logging.html&quot;&gt;Logging facility for Python&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;로깅 모듈과 관련된 클래스, 메서드 등 설명이 나와있는 문서&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/howto/logging-cookbook.html#logging-cookbook&quot;&gt;Logging cook book&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;다양한 사례가 나와 있는 문서&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;실행-환경&quot;&gt;실행 환경&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;다음과 같은 환경에서 학습을 진행했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Python 3.7.5&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MacOS Catalina&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;학습한-내용&quot;&gt;학습한 내용&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;파이썬 로깅 모듈 중 다음과 같은 내용을 학습했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;로거&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;핸들러&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;포메터&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;필터&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;멀티 핸들러 사용 (표준 출력, 파일 출력)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;로그 로테이팅&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;logging-기초-자습서&quot;&gt;Logging 기초 자습서&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.python.org/ko/3/howto/logging.html#basic-logging-tutorial&quot;&gt;Logging 기초 자습서&lt;/a&gt;는 로깅 모듈에 대한 기본적인 기능을 다루고 있다. 따라서 해당 문서를 참조해 기본 기능을 학습하도록 한다.&lt;/p&gt;

&lt;p&gt;해당 문서는 다음과 같은 내용을 포함하고 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;로깅을 사용할 때&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;로깅 사용의 간단한 예&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파일에 로깅하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;여러 모듈에서의 로깅&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;변수 데이터 로깅&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;표시된 메시지의 포맷 변경&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;메시지에 날짜/시간 표시&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;필터&quot;&gt;필터&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;필터에 관한 자세한 설명은 &lt;a href=&quot;https://docs.python.org/ko/3/library/logging.html#filter-objects&quot;&gt;Logging facility for Python - Filter 객체&lt;/a&gt;를 참고한다.&lt;/p&gt;

&lt;p&gt;해당 문서로 필터에 관하여 이해되지 않는 부분이 있어 &lt;a href=&quot;https://has3ong.tistory.com/382&quot;&gt;https://has3ong.tistory.com/382&lt;/a&gt;에서 발췌한 내용을 남겨두었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Filter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;로그 레코드가 로거에서 핸들러로 넘겨질 때, 필터를 사용해서 로그 레코드에 추가적인 제어를 할 수 있다.&lt;/p&gt;

&lt;p&gt;필터를 적용하면 로그 처리 기준을 추가할 수 있다.&lt;/p&gt;

&lt;p&gt;예를 들어 필터를 추가하여 ERROR 메시지 중에서 특정 소스로부터 오는 메시지만 핸들러로 넘길 수 있습니다.&lt;/p&gt;

&lt;p&gt;로그 레코드는 로거에서 로그를 기록할 때 호출되는 인스턴스이다.&lt;/p&gt;

&lt;p&gt;자세한 내용은 &lt;a href=&quot;https://docs.python.org/ko/3/library/logging.html#logrecord-objects&quot;&gt;Logging facility for Python - LogRecord 객체&lt;/a&gt; 참고 한다.&lt;/p&gt;

&lt;p&gt;아래는 &lt;a href=&quot;https://docs.python.org/ko/3/howto/logging-cookbook.html#using-filters-to-impart-contextual-information&quot;&gt;Logging cook book - 문맥 정보 전달에 필터 사용하기&lt;/a&gt;를 따라하며 실습한 내용이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import logging
from random import choice

class ContextFilter(logging.Filter):
    USERS = ['wind', 'harry', 'kevin']
    IPS = ['123.231.231.123', '127.0.0.1', '192.168.0.1']

    def filter(self, record):

        record.ip = choice(ContextFilter.IPS)
        record.user = choice(ContextFilter.USERS)
        return True


if __name__ == '__main__':
    levels = (logging.DEBUG, logging.INFO, logging.WARNING,
              logging.ERROR, logging.CRITICAL)
    logging.basicConfig(level=logging.DEBUG,
                        format='%(asctime)-15s %(name)-5s %(levelname)-8s IP: %(ip)-15s User: %(user)-8s %(message)s')
    a1 = logging.getLogger('a.b.c')
    a2 = logging.getLogger('d.e.f')

    f = ContextFilter()

    a1.addFilter(f)
    a2.addFilter(f)

    a1.debug('A debug message')
    a1.info('An info message with %s', 'some parameters')

    for x in range(10):
        lvl = choice(levels)
        lvlname = logging.getLevelName(lvl)
        a2.log(lvl, 'A message at %s level with %d %s',
               lvlname, 2, 'parameters')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3 main.py
2019-10-18 11:54:03,246 a.b.c DEBUG    IP: 192.168.0.1     User: wind     A debug message
2019-10-18 11:54:03,249 a.b.c INFO     IP: 123.231.231.123 User: harry    An info message with some parameters
2019-10-18 11:54:03,249 d.e.f ERROR    IP: 192.168.0.1     User: kevin    A message at ERROR level with 2 parameters
2019-10-18 11:54:03,250 d.e.f CRITICAL IP: 127.0.0.1       User: wind     A message at CRITICAL level with 2 parameters
2019-10-18 11:54:03,250 d.e.f WARNING  IP: 127.0.0.1       User: wind     A message at WARNING level with 2 parameters
2019-10-18 11:54:03,250 d.e.f DEBUG    IP: 192.168.0.1     User: kevin    A message at DEBUG level with 2 parameters
2019-10-18 11:54:03,250 d.e.f INFO     IP: 123.231.231.123 User: kevin    A message at INFO level with 2 parameters
2019-10-18 11:54:03,251 d.e.f INFO     IP: 127.0.0.1       User: wind     A message at INFO level with 2 parameters
2019-10-18 11:54:03,251 d.e.f ERROR    IP: 127.0.0.1       User: harry    A message at ERROR level with 2 parameters
2019-10-18 11:54:03,251 d.e.f ERROR    IP: 123.231.231.123 User: harry    A message at ERROR level with 2 parameters
2019-10-18 11:54:03,252 d.e.f CRITICAL IP: 127.0.0.1       User: wind     A message at CRITICAL level with 2 parameters
2019-10-18 11:54:03,252 d.e.f WARNING  IP: 192.168.0.1     User: harry    A message at WARNING level with 2 parameters
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;멀티-핸들러-사용&quot;&gt;멀티 핸들러 사용&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;로거 객체에 2종류의 핸들러(StreamHandler - 표준출력, FileHandler - 파일출력)를 추가하는 실습을 진행한다.&lt;/p&gt;

&lt;p&gt;다음은 실습한 내용의 Python 코드이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import logging

seong_logger = logging.getLogger(&quot;seongwoo&quot;)

seong_logger.setLevel(logging.DEBUG)

seong_logger.addHandler(logging.FileHandler(&quot;log/seong.log&quot;))
seong_logger.addHandler(logging.StreamHandler())

seong_logger.info(&quot;test&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;표준 출력과 파일 출력(seong.log)이 되는 지 확인하였다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3 main.py
test

$ cat seong.log
test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;로그-로테이팅&quot;&gt;로그 로테이팅&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.python.org/ko/3/library/logging.handlers.html&quot;&gt;logging.handlers&lt;/a&gt;를 보면 로그 로테이팅과 관련하여 다음과 같은 3가지 핸들러를 설명하고 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;BaseRotatingHandler&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RotatingFileHandler&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TimedRotatingFileHandler&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 중에서 RotatingFileHandler와 TimedRotatingFileHandler에 대해 학습 및 실습한다.&lt;/p&gt;

&lt;h2 id=&quot;rotatingfilehandler&quot;&gt;RotatingFileHandler&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class logging.handlers.RotatingFileHandler(filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;RotatingFileHandler의 자세한 설명은 &lt;a href=&quot;https://docs.python.org/ko/3/library/logging.handlers.html#rotatingfilehandler&quot;&gt;logging.handler - rotatingfilehandler&lt;/a&gt;를 참고한다. 문서 내용 중 기록될 필요가 있다고 생각되는 내용만 정리했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;maxBytes 파라미터는 로그 파일 최대 허용 크기를 의미한다. maxBytes가 0일 경우 로그 로테이팅은 발생하지 않는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;backupCount 파라미터는 롤오버(로그 로테이팅)가 발생하였을 때 백업 파일의 개수를 의미한다. &lt;br /&gt;
가장 최근에 발생한 로그는 filename 파일에 저장되어있으며 filename.1, filename.2 … 형식로 저장된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음은 &lt;a href=&quot;https://docs.python.org/ko/3/howto/logging-cookbook.html#using-file-rotation&quot;&gt;Logging cook book - 파일 회전하기&lt;/a&gt;에 코드를  일부 수정하여 실습한 코드이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import glob
import logging
import logging.handlers

LOG_FILENAME = 'logging_rotatingfile_example.out'

my_logger = logging.getLogger(&quot;MyLogger&quot;)
my_logger.setLevel(logging.DEBUG)

handlers = logging.handlers.RotatingFileHandler(
    LOG_FILENAME, maxBytes=200, backupCount=2)
my_logger.addHandler(handlers)

for i in range(20):
    my_logger.debug('file log rotating test line %3d' % i)

logfiles = glob.glob('%s*' % LOG_FILENAME)

for filename in logfiles:
    print(filename)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래의 코드를 여러번 실행할 경우에는 mode 인자의 디폴트 값이 ‘a’이므로 기존에 생성 되었던 로그 파일들을 삭제하고 실행 해야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3 file_rotating_test.py
logging_rotatingfile_example.out.2
logging_rotatingfile_example.out.1
logging_rotatingfile_example.out
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;timedrotatingfilehandler&quot;&gt;TimedRotatingFileHandler&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1, backupCount=0, encoding=None, delay=False, utc=False, atTime=None)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;TimeRotatingHandler의 자세한 설명은 &lt;a href=&quot;https://docs.python.org/ko/3/library/logging.handlers.html#timedrotatingfilehandler&quot;&gt;logging.handler - timerotatinghandler&lt;/a&gt;를 참고한다. 문서 내용 중 기록될 필요가 있다고 생각되는 내용만 정리했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1분마다 롤오버가 되도록 설정되어 있는데, 5분간 로그가 발생하지 않으면 롤오버가 발생하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음과 같은 시나리오를 바탕으로 TimeRotatingHandler를 테스트했다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;로거 인스턴스 생성후 시작시간 측정&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;시작 시간으로 부터 1초, 5초, 6초뒤 현재 시간 로그 출력&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;생성된 로그 파일명 출력&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 시나리오를 바탕으로 다음과 같은 파이썬 코드를 작성하였다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import glob
import logging
import logging.handlers
from time import time, sleep

LOG_FILENAME = 'timerotating_logtest.out'


def main():
    my_logger = logging.getLogger(&quot;MyLogger&quot;)
    my_logger.setLevel(logging.DEBUG)

    handlers = logging.handlers.TimedRotatingFileHandler(
        LOG_FILENAME, when='s', interval=1, backupCount=10)
    my_logger.addHandler(handlers)

    start_time = time()

    delay_timetable = [1., 5., 6.]

    for delay_time in delay_timetable:
        while True:
            if start_time + delay_time &amp;lt; time():
                my_logger.debug('time log rotating test - %f' % time())
                break

    logfiles = glob.glob('%s*' % LOG_FILENAME)

    for filename in logfiles:
        print(filename)


if __name__ == &quot;__main__&quot;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3 time_rotating_test.py
timerotating_logtest.out.2019-10-17_20-05-52
timerotating_logtest.out
timerotating_logtest.out.2019-10-17_20-05-56
timerotating_logtest.out.2019-10-17_20-05-51
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행 결과를 통해 시작 시간으로부터 1초, 5초, 6초뒤 로그가 출력된 것을 알 수 있으며 “timerotating_logtest.out.2019-10-17_20-05-51” 파일을 통하여 처음 로거를 생성하고 1초뒤 로그가 출력된 것을 알 수 있다.&lt;/p&gt;</content><author><name>Andro</name><email>seongwoo.dev@gmail.com</email></author><category term="Python" /><category term="Logging" /><summary type="html">이 문서는 Python Logging 모듈에 대한 공식 문서 중 아래와 같은 내용을 정리하고 공유하기 위하여 작성했다.</summary></entry><entry><title type="html">Slackbot API 중 Webhooks,Web API를 이용한 메시지 보내기</title><link href="http://localhost:4000/slack/slack_api_webhook/" rel="alternate" type="text/html" title="Slackbot API 중 Webhooks,Web API를 이용한 메시지 보내기" /><published>2019-12-11T00:00:00+09:00</published><updated>2019-12-11T00:00:00+09:00</updated><id>http://localhost:4000/slack/slack_api_webhook</id><content type="html" xml:base="http://localhost:4000/slack/slack_api_webhook/">&lt;h1 id=&quot;문서목적&quot;&gt;문서목적&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;이 문서는 Slackbot에 대해 학습한 부분을 정리하기 위해 작성하였다.&lt;br /&gt;
이 문서에서 Slackbot과 관련된 모든 내용을 정리하는 것은 아니며, 자세한 내용은 문서에 포함되어 있는 공식 사이트를 참고하도록 한다.&lt;/p&gt;

&lt;h1 id=&quot;학습-범위&quot;&gt;학습 범위&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;아래와 같은 내용 포함하고 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;특정 채널에 Slackbot으로 메시지 보내기&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Webhooks API를 이용한 메시지 전달&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Web API를 이용한 메시지 전달&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;특정 채널에 예약 메시지 보내기&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;본 문서에 포함된 테스트는 워크 스페이스에 test-slackbot이라는 채널을 만들어 진행하였다. 아래 정리한 내용은 공식 사이트에 관련 내용이 문서로 있으며 문서 참고 시 필요한 내용을 위주로 기록하였다.&lt;/p&gt;

&lt;h1 id=&quot;특정-채널에-slackbot으로-메시지-보내기&quot;&gt;특정 채널에 Slackbot으로 메시지 보내기&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;slackbot-webhook-api를-통한-메시지-전달&quot;&gt;Slackbot webhook API를 통한 메시지 전달&lt;/h2&gt;

&lt;p&gt;Slackbot webhook API로 특정 채널에 메시지를 보내기 위해서는 아래와 같은 작업을 진행해야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;메시지를 보내고 싶은 슬랙 워크스페이스에 슬랙앱을 생성한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;슬랙앱에 Webhook을 추가한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;생성한 Webhook을 슬랙 워크스페이스의 특정 채널에 추가한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 작업을 완료하면 설정한 채널에 Webhook API를 이용하여 메시지를 보낼 수 있다. 슬랙 앱 Webhook 콘솔에 보면 Sample curl request이 있는데 이것을 복사해 메시지가 정상적으로 보내지는 지 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;위에 기술된 작업 내용은 &lt;a href=&quot;https://api.slack.com/messaging/webhooks&quot;&gt;슬랙 공식 사이트 Webhook&lt;/a&gt; 문서를 참조해 진행하도록 한다.&lt;/p&gt;

&lt;p&gt;이 문서의 내용 중 &lt;strong&gt;Getting started with Incoming Webhooks&lt;/strong&gt; 항목의 1~4번 내용을 따라하면 된다.&lt;/p&gt;

&lt;p&gt;위의 링크 문서 내용 중 슬랙으로 Webhook API를 이용해 메시지 보내는 샘플 명령어와 결과는 아래와 같다. &lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X POST -H 'Content-type: application/json' --data '{&quot;text&quot;:&quot;Hello, World!&quot;}' https://hooks.slack.com/services/{token}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;결과는 다음과 같다. 슬랙 채널 #test-slackbot에 가면 결과를 바로 볼 수 있다. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/webhook1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;slackbot-web-api를-통한-메시지-전달&quot;&gt;Slackbot web API를 통한 메시지 전달&lt;/h2&gt;

&lt;p&gt;Slackbot web API로 특정 채널에 메시지를 보내기 위해서는 아래와 같은 작업을 진행해야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;메시지를 보내고 싶은 슬랙 워크스페이스에 슬랙앱을 생성한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;슬랙앱에 채널 메시지 읽기, 쓰기에 대한 권한을 부여한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;발급된 토큰을 가지고 Message payload를 만들어 전송한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 작업을 통해 설정한 채널에 Web API를 이용하여 메시지를 보낼 수 있다. 위에 기술된 작업과 관련된 자세한 설명은  &lt;a href=&quot;https://api.slack.com/messaging/sending&quot;&gt;슬랙 공식 사이트 Web API&lt;/a&gt; 문서를 참조해 진행하도록 한다.&lt;/p&gt;

&lt;p&gt;Web API, Webhook API 차이점은 web API가 더 많은 부분들을 커스터마이징해 메시지를 보낼 수 있다는 것이다. 기본적인 메시지 기능을 주로 쓴다고 하면 Webhook API를 이용하는 것이 편리하다.&lt;/p&gt;

&lt;p&gt;아래의 명령어는 실제 메시지를 채널에 보낼 때 Slackbot의 이름과 채널을 변경할 수 있는데 권한과 다양한 옵션들을 통해 여러 가지 기능들을 수행할 수 있다.&lt;/p&gt;

&lt;p&gt;위의 링크 문서 내용 중 슬랙으로 Web API를 이용해 메시지 보내는 샘플 명령어와 결과는 아래와 같다. &lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X POST -d &quot;token={token}3&amp;amp;channel=#test-slackbot&amp;amp;text=“asdasd”&amp;amp;username=seongwoo&quot; https://slack.com/api/chat.postMessage

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;결과는 다음과 같다. 슬랙 채널 #test-slackbot에 가면 결과를 바로 볼 수 있다. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/webhook2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;특정-채널에slackbot으로-예약-메시지-보내기&quot;&gt;특정 채널에 Slackbot으로 예약 메시지 보내기&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;특정 채널에 Slackbot으로 메시지를 보낼 수 있는 방법에 대한 구체적인 설명은  &lt;a href=&quot;https://api.slack.com/messaging/scheduling&quot;&gt;슬랙 공식 사이트 스케줄링 메시지 전송&lt;/a&gt; 문서를 참고하도록 한다.&lt;/p&gt;

&lt;p&gt;메시지를 보낼 때 유의해야 되는 부분은 chat.scheduleMessage API의 필수 파라미터 중 “post_at” 필드는 Unix EPOCH timestamp이므로 메시지 예약하고자 하는 시간을 Unix EPOCH timestamp으로 변환해 값을 넣어야 한다는 것이다.&lt;/p&gt;

&lt;p&gt;위의 링크 문서 내용 중 슬랙으로 예약된 메시지를 보내는 샘플 명령어와 결과는 아래와 같다. &lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X POST -H 'Authorization: Bearer {token}' \
-H 'Content-type: application/json' \
--data '{&quot;channel&quot;:&quot;#test-slackbot&quot;,&quot;text&quot;:&quot;I hope the tour went well, Mr. Wonka.&quot;, &quot;post_at&quot;:&quot;1571730289&quot;}' \
https://slack.com/api/chat.scheduleMessage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;결과는 다음과 같다. 슬랙 채널 #test-slackbot에서 예약된 시간에 결과를 볼 수 있다. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/webhook3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Andro</name><email>seongwoo.dev@gmail.com</email></author><category term="Slack_API" /><category term="Slack" /><summary type="html">이 문서는 Slackbot에 대해 학습한 부분을 정리하기 위해 작성하였다.</summary></entry><entry><title type="html">Fluentd(td-agent) 설치 및 실행 방법</title><link href="http://localhost:4000/fluentd/fluentd_install/" rel="alternate" type="text/html" title="Fluentd(td-agent) 설치 및 실행 방법" /><published>2019-12-10T00:00:00+09:00</published><updated>2019-12-10T00:00:00+09:00</updated><id>http://localhost:4000/fluentd/fluentd_install</id><content type="html" xml:base="http://localhost:4000/fluentd/fluentd_install/">&lt;h1 id=&quot;td-agent-설치-및-확인&quot;&gt;Td-agent 설치 및 확인&lt;/h1&gt;

&lt;p&gt;아래 내용은 Mac에서 td-agent를 설치하고 기본 동작을 확인하는 것을 기준으로 작성된 내용이다.&lt;/p&gt;

&lt;p&gt;참고:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.fluentd.org/installation/install-by-dmg&quot;&gt;https://docs.fluentd.org/installation/install-by-dmg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;설치 완료되면 아래 경로에 td-agent가 설치된다.&lt;br /&gt;
/opt/td-agent/usr/sbin/&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls -l /opt/td-agent/usr/sbin/
total 16
-rwxr-xr-x  1 root  wheel  348 Feb  1  2018 td-agent
-rwxr-xr-x  1 root  wheel  177 Feb  1  2018 td-agent-gem

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;디폴트 설정 파일은 아래 경로에서 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls -l /etc/td-agent/
total 8
drwxr-xr-x  2 root  wheel    64 Jun 12 22:27 plugin
-rw-r--r--  1 root  wheel  2381 Jun 12 22:27 td-agent.conf

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;/etc/td-agent/td-agent.conf 파일의 내용 일부는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... 중략 ...

# HTTP input
# POST http://localhost:8888/&amp;lt;tag&amp;gt;?json=&amp;lt;json&amp;gt;
# POST http://localhost:8888/td.myapp.login?json={&quot;user&quot;%3A&quot;me&quot;}
# @see http://docs.fluentd.org/articles/in_http
&amp;lt;source&amp;gt;
  @type http
  @id input_http
  port 8888
&amp;lt;/source&amp;gt;

... 중략 ...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;start-td-agent-on-mac&quot;&gt;Start td-agent on Mac&lt;/h2&gt;

&lt;p&gt;Daemon 방식 실행&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo launchctl load /Library/LaunchDaemons/td-agent.plist
$ less /var/log/td-agent/td-agent.log

$ ps -ef | grep td-agent
    0 47678     1   0 10:42PM ??         0:00.37 /opt/td-agent/embedded/bin/ruby /opt/td-agent/usr/sbin/td-agent --log /var/log/td-agent/td-agent.log --use-v1-config
    0 47679 47678   0 10:42PM ??         0:00.46 /opt/td-agent/embedded/bin/ruby -Eascii-8bit:ascii-8bit /opt/td-agent/usr/sbin/td-agent --log /var/log/td-agent/td-agent.log --use-v1-config --under-supervisor
  502 47713 47688   0 10:44PM ttys025    0:00.00 grep td-agent

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;데몬으로 실행하는 경우 stdout이 없고 stdout으로 출력되는 로그가 /var/log/td-agent/td-agent.log에 남겨진다.&lt;/p&gt;

&lt;p&gt;기본 foreground로 실행하기&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ /opt/td-agent/usr/sbin/td-agent -c /etc/td-agent/td-agent.conf

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 경우 stdout으로 출력된다.&lt;/p&gt;

&lt;h2 id=&quot;test&quot;&gt;Test&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X POST -d 'json={&quot;json&quot;:&quot;message&quot;}' http://localhost:8888/debug.test

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;stop-td-agent-damon-on-mac&quot;&gt;Stop td-agent damon on Mac&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo launchctl unload /Library/LaunchDaemons/td-agent.plist

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;참고자료&quot;&gt;참고자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.fluentd.org/installation/install-by-dmg&quot;&gt;https://docs.fluentd.org/installation/install-by-dmg&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://bcho.tistory.com/1115&quot;&gt;https://bcho.tistory.com/1115&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://brunch.co.kr/@zigzag/16?utm_source=gaerae.com&amp;amp;utm_campaign=%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%8A%A4%EB%9F%BD%EB%8B%A4&amp;amp;utm_medium=social&amp;amp;fbclid=IwAR1pVa1grnRrsxpiOIHJBLyT_ATjBjpeuyA1v7GxsK0Aj8_DoqKeUbndIdQ&quot;&gt;https://brunch.co.kr/@zigzag/16?utm_source=gaerae.com&amp;amp;utm_campaign=%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%8A%A4%EB%9F%BD%EB%8B%A4&amp;amp;utm_medium=social&amp;amp;fbclid=IwAR1pVa1grnRrsxpiOIHJBLyT_ATjBjpeuyA1v7GxsK0Aj8_DoqKeUbndIdQ&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andro</name><email>seongwoo.dev@gmail.com</email></author><category term="Fluentd" /><summary type="html">아래 내용은 Mac에서 td-agent를 설치하고 기본 동작을 확인하는 것을 기준으로 작성된 내용이다.</summary></entry><entry><title type="html">Fluentd(td-agent) Filter plugin</title><link href="http://localhost:4000/fluentd/fluentd_filter_plugin_operation_check/" rel="alternate" type="text/html" title="Fluentd(td-agent) Filter plugin" /><published>2019-12-10T00:00:00+09:00</published><updated>2019-12-10T00:00:00+09:00</updated><id>http://localhost:4000/fluentd/fluentd_filter_plugin_operation_check</id><content type="html" xml:base="http://localhost:4000/fluentd/fluentd_filter_plugin_operation_check/">&lt;h1 id=&quot;테스트-목적&quot;&gt;테스트 목적&lt;/h1&gt;

&lt;p&gt;이 문서는 Fluentd의 학습 차원에서 다음과 같은 테스트 케이스 별 Filter plugin의 단순 동작 확인에 목적을 두고 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;필드를 가공해야하는 경우&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;로그 값을 확인하여 필터링 하는 경우&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;로그를 파싱하여 저장하는 경우&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;테스트-환경&quot;&gt;테스트 환경&lt;/h1&gt;

&lt;p&gt;다음과 같은 환경에서 테스트 하였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;OS : masOS Mojave v10.14.6&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fluentd : 1.0.2 (td-agent : 3.1.1.0)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;테스트-사전-정보&quot;&gt;테스트 사전 정보&lt;/h1&gt;

&lt;p&gt;Fluentd 기초 사용법을 확인하여 td-agent 기초 동작을 확인하면 된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;테스트-케이스--필드를-가공해야하는-경우-filter---record_transformer&quot;&gt;테스트 케이스 : 필드를 가공해야하는 경우 (Filter - record_transformer)&lt;/h1&gt;

&lt;p&gt;td-agent로 로그를 수집하여 저장하는 과정에서 필드의 가공이 필요한 경우가 있다.&lt;/p&gt;

&lt;p&gt;이러한 경우 Filter plugin중 record_transformer 타입을 사용하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;테스트-목적-1&quot;&gt;테스트 목적&lt;/h2&gt;

&lt;p&gt;이 테스트는 학습차원에서 다음과 같은 td-agent의 단순 동작 확인이 목적이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;파일에서 로그를 수집하여 저장하는 과정에서 Filter plugin의 record_transformer 타입을 사용하여 필드 가공&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;테스트-시나리오&quot;&gt;테스트 시나리오&lt;/h2&gt;

&lt;p&gt;이 테스트는 다음과 같은 시나리오를 바탕으로 진행된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;다음과 같은 형태 json로그가 파일에 생성된다.&lt;/p&gt;

    &lt;p&gt;{ “user_id” : “javascript0247”, “created_at” : “2019-08-16T01:23:45+0900”, “os” : “Android” }&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파일에서 로그를 수집하고 다음과 같은 조건으로 필드를 가공한다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;로그 수집 시각인 “collected_at” 필드 추가&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;만들어진 시각인 “created_at” 필드 삭제&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;“os”필드를 “device_os”로 변경&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;필드가 가공된 로그는 다음과 같은 형태의 파일로 출력된다.&lt;/p&gt;

    &lt;p&gt;{ “user_id” : “javascript0247”, “collected_at” : “2019-08-16T14:22:00+0900”, “device_os” : “Android” }&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;테스트-plugin-정보&quot;&gt;테스트 Plugin 정보&lt;/h2&gt;

&lt;h3 id=&quot;source-plugin---tail&quot;&gt;Source Plugin - tail&lt;/h3&gt;

&lt;p&gt;다음은 테스트에서 사용할 tail 설정 예시이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;source&amp;gt;  
  @type tail
  path /Users/kevin/dev/fluentd/test/filter_record_transformer/source/*
  pos_file /Users/kevin/dev/fluentd/test/filter_record_transformer/pos/filter_record_transformer.pos
  &amp;lt;parse&amp;gt;
    @type json
  &amp;lt;/parse&amp;gt;
  tag filter_record_transformer.test
  refresh_interval 5s
&amp;lt;/source&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 설정 예시에 관하여 간단하게 설명하면 다음과 같다. required 설정은 녹색으로 표기하였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;@type : tail type을 사용한다. 자세한 내용은 아래의 링크를 통하여 확인한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;path : 읽어오고자 하는 파일의 경로를 의미한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pos_file : td-agent는 파일마다 읽었던 위치를 파일로 저장해두는데 그 파일의 경로를 지정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;parse&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;@type : json를 사용한다. 자세한 내용은 아래의 링크를 통하여 확인한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tag : 이벤트를 구분짓기 위한 tag name을 의미한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;refresh_interval : td-agent가 수집하려는 파일리스트의 갱신주기를 의미한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자세한 내용은 아래의 링크를 통하여 확인한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.fluentd.org/input/tail&quot;&gt;Fluentd - Input Plugin : tail&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.fluentd.org/parser/json&quot;&gt;Fluentd - Parser Plugin : json&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;filter-plugin---record_transformer&quot;&gt;Filter Plugin - record_transformer&lt;/h3&gt;

&lt;p&gt;다음은 테스트에서 사용할 grep 설정 예시이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;filter filter_record_transformer.*&amp;gt;  
  @type record_transformer
  enable_ruby true
  &amp;lt;record&amp;gt;
    collected_at ${time.strftime('%Y-%m-%dT%H:%M:%S%z')}
    device_os ${record[&quot;os&quot;]}
  &amp;lt;/record&amp;gt;
  remove_keys [ &quot;os&quot;, &quot;created_at&quot; ]
&amp;lt;/filter&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 설정 예시에 관하여 간단하게 설명하면 다음과 같다. required 설정은 녹색으로 표기하였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&amp;lt;filter pattern&amp;gt; : pattern 부분에 filter plugin을 적용시키고자 하는 이벤트(tag명)를 명시한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@type : record을 사용한다. 자세한 내용은 아래의 링크를 참고한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;enable_ruby : 필드 가공시 ‘Ruby’식 표현을 사용하는 지에 대하여 묻는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;record : 필드의 추가를 의미한다. “필드명 : 필드값” 형태로 추가한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;remove_keys : 삭제할 필드명을 지정한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자세한 내용은 아래의 링크를 통하여 확인한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.fluentd.org/filter/record_transformer&quot;&gt;Fluentd - Filter plugin : record_transformer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;match-plugin---file&quot;&gt;Match Plugin - file&lt;/h3&gt;

&lt;p&gt;다음은 테스트에서 사용하게 될 file 설정 예시이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;match filter_record_transformer.*&amp;gt;  
  @type file
  path /Users/kevin/dev/fluentd/test/filter_record_transformer/match/${tag}
  path_suffix &quot;.json&quot;
  add_path_suffix true
  append true
  &amp;lt;format&amp;gt;
    @type json
  &amp;lt;/format&amp;gt;
  &amp;lt;buffer tag&amp;gt;
    path /Users/kevin/dev/fluentd/test/filter_record_transformer/match/
    flush_mode interval
    flush_interval 10s
  &amp;lt;/buffer&amp;gt;
&amp;lt;/match&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 과정에서 사용하는 설정과 간단한 설명이다. required 설정은 녹색으로 표기하였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&amp;lt;match pattern&amp;gt; : pattern 부분에 match plugin을 적용시키고자 하는 이벤트(tag명)를 명시한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@type : file을 사용한다. 자세한 내용은 아래의 링크를 참고한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;path : 출력할 파일의 경로를 의미한다. 예약어(예: tag)를 사용할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;path_suffix : 확장자명을 지정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;add_path_suffix : path_suffix 사용유무를 지정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;append : 한 파일에 출력하는지 여부를 지정한다. 원할한 테스트를 위하여 설정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;format : json으로 설정한다. 자세한 내용은 아래의 링크를 참고한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;buffer : 자세한 내용은 아래의 링크를 참고한다. 원할한 테스트를 위하여 설정한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자세한 내용은 아래의 링크를 통하여 확인한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.fluentd.org/output/file&quot;&gt;Fluentd - Output Plugin : file&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.fluentd.org/formatter/json&quot;&gt;Fluentd - Fommatter Plugin : json&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.fluentd.org/configuration/buffer-section&quot;&gt;Fluentd - Config : Buffer Section&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;테스트-과정&quot;&gt;테스트 과정&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;파일을 생성하고 정상적으로 생성 되었는지 확인한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch filter_record_transformer.json | stat filter_record_transformer.json
16777223 8192640 -rw-r--r-- 1 kevin staff 0 0 &quot;Aug 14 14:01:39 2019&quot; &quot;Aug 14 14:01:39 2019&quot; &quot;Aug 14 14:01:39 2019&quot; &quot;Aug 14 14:01:39 2019&quot; 4096 0 0 filter_record_transformer.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;td-agent 설정파일 경로를 수정한다. &lt;br /&gt;
다음은 경로 예시이다.&lt;/p&gt;

    &lt;p&gt;/Users/kevin/dev/fluentd/test/filter_record_transformer/config/td-agent_filter_record_transformer.conf&lt;/p&gt;

    &lt;p&gt;수정한 경로에 td-agent 설정 파일을 생성한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch td-agent_filter_record_transformer.conf | stat td-agent_filter_record_transformer.conf
16777223 8192245 -rw-r--r-- 1 kevin staff 0 0 &quot;Aug 14 13:50:42 2019&quot; &quot;Aug 14 13:50:42 2019&quot; &quot;Aug 14 13:50:42 2019&quot; &quot;Aug 14 13:50:42 2019&quot; 4096 0 0 td-agent_filter_record_transformer.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;td-agent 설정 파일을 다음과 같이 수정한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vim td-agent_filter_record_transformer.conf
&amp;lt;source&amp;gt;
  @type tail
  tag filter_record_transformer.test
  path /Users/kevin/dev/fluentd/test/filter_record_transformer/source/*
  pos_file /Users/kevin/dev/fluentd/test/filter_record_transformer/pos/filter_record_transformer.pos
  &amp;lt;parse&amp;gt;
    @type json
  &amp;lt;/parse&amp;gt;
  refresh_interval 5s
&amp;lt;/source&amp;gt;
&amp;lt;filter filter_record_transformer.*&amp;gt;
  @type record_transformer
  enable_ruby true
  &amp;lt;record&amp;gt;
    collected_at ${time.strftime('%Y-%m-%dT%H:%M:%S%z')}
    device_os ${record[&quot;os&quot;]}
  &amp;lt;/record&amp;gt;
  remove_keys [ &quot;os&quot;, &quot;created_at&quot; ]
&amp;lt;/filter&amp;gt;
&amp;lt;match filter_record_transformer.*&amp;gt;
  @type file
  path /Users/kevin/dev/fluentd/test/filter_record_transformer/match/${tag}
  add_path_suffix true
  path_suffix &quot;.json&quot;
  append true
  &amp;lt;format&amp;gt;
    @type json
  &amp;lt;/format&amp;gt;
  &amp;lt;buffer tag&amp;gt;
    path /Users/kevin/dev/fluentd/test/filter_record_transformer/match/
    flush_mode interval
    flush_interval 10s
  &amp;lt;/buffer&amp;gt;
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;이제 td-agent를 실행한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;입력용 파일에 로그를 출력하고 정상적으로 출력되었는지 확인한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat filter_record_transformer.json
{ &quot;user_id&quot; : &quot;javascript0247&quot;, &quot;created_at&quot; : &quot;2019-08-16T01:23:45+0900&quot;, &quot;os&quot; : &quot;Android&quot; }
{ &quot;user_id&quot; : &quot;kotlin_0247&quot;, &quot;created_at&quot; : &quot;2019-08-16T14:28:10+0900&quot;, &quot;os&quot; : &quot;Android&quot; }
{ &quot;user_id&quot; : &quot;java_8615&quot;, &quot;created_at&quot; : &quot;2019-08-16T14:30:00+0900&quot;, &quot;os&quot; : &quot;iOS&quot; }
{ &quot;user_id&quot; : &quot;python_1574&quot;, &quot;created_at&quot; : &quot;2019-08-16T14:30:00+0900&quot;, &quot;os&quot; : &quot;iOS&quot; }
{ &quot;user_id&quot; : &quot;cpp_2464&quot;, &quot;created_at&quot; : &quot;2019-08-16T14:30:00+0900&quot;, &quot;os&quot; : &quot;iOS&quot; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;출력용 파일에 출력된 로그를 확인한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat filter_record_transformer.test.json
{&quot;user_id&quot;:&quot;javascript0247&quot;,&quot;collected_at&quot;:&quot;2019-08-16T15:14:29+0900&quot;,&quot;device_os&quot;:&quot;Android&quot;}
{&quot;user_id&quot;:&quot;kotlin_0247&quot;,&quot;collected_at&quot;:&quot;2019-08-16T15:14:29+0900&quot;,&quot;device_os&quot;:&quot;Android&quot;}
{&quot;user_id&quot;:&quot;java_8615&quot;,&quot;collected_at&quot;:&quot;2019-08-16T15:14:29+0900&quot;,&quot;device_os&quot;:&quot;iOS&quot;}
{&quot;user_id&quot;:&quot;python_1574&quot;,&quot;collected_at&quot;:&quot;2019-08-16T15:14:29+0900&quot;,&quot;device_os&quot;:&quot;iOS&quot;}
{&quot;user_id&quot;:&quot;cpp_2464&quot;,&quot;collected_at&quot;:&quot;2019-08-16T15:14:29+0900&quot;,&quot;device_os&quot;:&quot;iOS&quot;} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;테스트-결과&quot;&gt;테스트 결과&lt;/h2&gt;

&lt;p&gt;테스트 결과 record_transformer 타입을 사용하여 필드 가공이 이루어지는지 확인하였다.&lt;/p&gt;

&lt;p&gt;테스트 과정에서 json 형태 로그에 관하여 다음과 같은 필드에 관한 수정이 이루어짐을 확인하였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;필드 추가 - collected_at&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;필드 삭제 - created_at&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;필드명 변경 - os / device_os&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음은 위의 필드수정 항목에 대한 예시이다.&lt;/p&gt;

&lt;p&gt;{ “user_id” : “javascript0247”, “created_at” : “2019-08-16T01:23:45+0900”, “os” : “Android” }&lt;/p&gt;

&lt;p&gt; {“user_id”:”javascript0247”,”collected_at”:”2019-08-16T15:14:29+0900”,”device_os”:”Android”}&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;테스트-케이스--로그-값을-확인하여-필터링-하는-경우-filter---grep&quot;&gt;테스트 케이스 : 로그 값을 확인하여 필터링 하는 경우 (Filter - grep)&lt;/h1&gt;

&lt;p&gt;td-agent로 로그를 수집하여 저장하는 과정에서 필터링하여 원하는 로그만 출력해야하는 경우가 있다.&lt;/p&gt;

&lt;p&gt;이러한 경우 Filter plugin중 grep 타입을 사용하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;테스트-목적-2&quot;&gt;테스트 목적&lt;/h2&gt;

&lt;p&gt;이 테스트는 학습차원에서 다음과 같은 td-agent의 단순 동작 확인이 목적이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;파일에서 로그를 수집하여 저장하는 과정에서 Filter plugin의 grep타입을 사용하여 원하는 로그만 필터링 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;테스트-시나리오-1&quot;&gt;테스트 시나리오&lt;/h2&gt;

&lt;p&gt;이 테스트는 다음과 같은 시나리오를 바탕으로 진행된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Apache access log가 파일로 생성된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Apache access log중 다음과 같은 요구사항에 충족되는 로그만 필터링한다.&lt;/p&gt;

    &lt;p&gt;요청 method가 “POST”이면서 status가 2XX이 아닌 경우&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;필터링된 결과는 파일로 출력한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;테스트-필요-정보&quot;&gt;테스트 필요 정보&lt;/h2&gt;

&lt;h3 id=&quot;apache-access-log&quot;&gt;Apache Access Log&lt;/h3&gt;

&lt;p&gt;테스트 과정에서 다음과 같은 Combined 로그 형식(Combined Log Format)을 사용한다.&lt;/p&gt;

&lt;p&gt;%h %l %u %t \“%r\” %&amp;gt;s %b  \”%{Referer}i\” \”%{User-agent}i\”&lt;/p&gt;

&lt;p&gt;%h : 서버에 요청을 한 클라이언트의 IP 주소를 의미한다.&lt;/p&gt;

&lt;p&gt;%l : 클라이언트 컴퓨터의 identd가 제공하는 클라이언트의 RFC 1413 신원이다. 만약 요청한 정보가 없다면 “-“로 표기한다.&lt;/p&gt;

&lt;p&gt;%u : HTTP 인증으로 알아낸 문서를 요청한 사용자의 userid이다. 문서를 암호로 보호하지 않는다면 “-“ 으로 표기한다.&lt;/p&gt;

&lt;p&gt;%t : 서버가 요청처리를 마친 시간을 의미한다. [day/month/year:hour:minute:second zone] 형식이다.&lt;/p&gt;

&lt;p&gt;\“%r\” : 클라이언트의 요청줄을 쌍따옴표로 묶어 표현한다. &lt;/p&gt;

&lt;p&gt;%&amp;gt;s : 서버가 클라이언트에게 보내는 상태코드이다.&lt;/p&gt;

&lt;p&gt;%b : 응답 헤더를 제외하고 클라이언트에게 보내는 내용의 크기를 나타낸다. 보내는 내용이 없다면 “-“으로 표기한다.&lt;/p&gt;

&lt;p&gt;\”%{Referer}i\” : 클라이언트가 참조하였다고 서버에게 알린 사이트이다.&lt;/p&gt;

&lt;p&gt;\”%{User-agent}i\” : 클라이언트 브라우저가 자신에 대해 알리는 식별 정보를 의미한다.&lt;/p&gt;

&lt;p&gt;다음은 Combined 로그 형식의 예시이다.&lt;/p&gt;

&lt;p&gt;127.0.0.1 - frank [10/Oct/2000:13:55:36 -0700] “GET /apache_pb.gif HTTP/1.0” 200 2326 “&lt;a href=&quot;http://www.example.com/start.html&quot;&gt;http://www.example.com/start.html&lt;/a&gt;” “Mozilla/4.08 [en] (Win98; I ;Nav)”&lt;/p&gt;

&lt;p&gt;자세한 내용은 다음의 링크를 참고한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://httpd.apache.org/docs/2.4/ko/logs.html&quot;&gt;로그파일 - Apache HTTP Server Version 2.4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;source-plugin---tail-1&quot;&gt;Source Plugin - tail&lt;/h3&gt;

&lt;p&gt;다음은 테스트에서 사용할 tail 설정 예시이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;source&amp;gt;
  @type tail
  path /Users/kevin/dev/fluentd/test/filter_grep/source/*
  pos_file /Users/kevin/dev/fluentd/test/pos/filter_grep.pos
  tag filter_grep.test
  &amp;lt;parse&amp;gt;
    @type apache2
  &amp;lt;/parse&amp;gt;
  refresh_interval 1s
&amp;lt;/source&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 설정 예시에 관하여 간단하게 설명하면 다음과 같다. required 설정은 녹색으로 표기하였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;@type : tail type을 사용한다. 자세한 내용은 아래의 링크를 통하여 확인한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;path : 읽어오고자 하는 파일의 경로를 의미한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pos_file : td-agent는 파일마다 읽었던 위치를 파일로 저장해두는데 그 파일의 경로를 지정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;parse&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;@type : apache2를 사용한다. 자세한 내용은 아래의 링크를 통하여 확인한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tag : 이벤트를 구분짓기 위한 tag name을 의미한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;refresh_interval : td-agent가 수집하려는 파일리스트의 갱신주기를 의미한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자세한 내용은 아래의 링크를 통하여 확인한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.fluentd.org/input/tail&quot;&gt;Fluentd - Input Plugins : tail&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.fluentd.org/parser/apache2&quot;&gt;Fluentd - Parser plugins : apache2&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;filter-plugin---grep&quot;&gt;Filter Plugin - grep&lt;/h3&gt;

&lt;p&gt;다음은 테스트에서 사용할 grep 설정 예시이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;filter filter_grep*&amp;gt;
  @type grep
  &amp;lt;regexp&amp;gt;
    key method
    pattern ^POST$
  &amp;lt;/regexp&amp;gt;
  &amp;lt;regexp&amp;gt;
    key code
    pattern ^[1-1|3-5]\d\d$
  &amp;lt;/regexp&amp;gt;
&amp;lt;/filter&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 설정 예시에 관하여 간단하게 설명하면 다음과 같다. required 설정은 녹색으로 표기하였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&amp;lt;filter pattern&amp;gt; : pattern 부분에 filter plugin을 적용시키고자 하는 이벤트(tag명)를 명시한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@type : grep을 사용한다. 자세한 내용은 아래의 링크를 참고한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;regexp&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;key : 필드명을 지정한다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;pattern : “Ruby의 정규표현식 표현”을 사용하여 표현한다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;공식 문서 상에는 “pattern /정규표현식/”으로 표현되어 있으나 “pattern 정규표현식” 형태로 표기하여야 정상적으로 동작한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;and&gt; &lt;or&gt;의 설정은 fluentd 1.2 부터 지원한다.
    

  

  

&lt;/or&gt;&lt;/and&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자세한 내용은 아래의 링크를 통하여 확인한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.fluentd.org/filter/grep&quot;&gt;Fluentd - Filter plugins : grep&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;match-plugin---file-1&quot;&gt;Match Plugin - file&lt;/h3&gt;

&lt;p&gt;다음은 테스트에서 사용하게 될 file 설정 예시이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;match filter_grep.*&amp;gt;
  @type file
  path /Users/kevin/dev/fluentd/test/filter_grep/match/${tag}_output
  path_suffix &quot;.log&quot;
  add_path_suffix true
  append true
  &amp;lt;format&amp;gt;
    @type out_file
    output_tag false
    output_time true
  &amp;lt;/format&amp;gt;
  &amp;lt;buffer tag&amp;gt;    
    flush_mode interval
    flush_interval 10s
  &amp;lt;/buffer&amp;gt;
&amp;lt;/match&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 과정에서 사용하는 설정과 간단한 설명이다. required 설정은 녹색으로 표기하였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&amp;lt;match pattern&amp;gt; : pattern 부분에 match plugin을 적용시키고자 하는 이벤트(tag명)를 명시한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@type : file을 사용한다. 자세한 내용은 아래의 링크를 참고한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;path : 출력할 파일의 경로를 의미한다. 예약어(예: tag)를 사용할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;path_suffix : 확장자명을 지정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;add_path_suffix : path_suffix 사용유무를 지정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;append : 한 파일에 출력하는지 여부를 지정한다. 원할한 테스트를 위하여 설정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;format : 아래의 &lt;strong&gt;Formatter Plugins - out_file&lt;/strong&gt;을 참고한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;buffer : 자세한 내용은 아래의 링크를 참고한다. 원할한 테스트를 위하여 설정한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자세한 내용은 아래의 링크를 통하여 확인한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.fluentd.org/output/file&quot;&gt;Fluentd - Output plugins : file&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.fluentd.org/configuration/buffer-section&quot;&gt;Fluentd - Config : Buffer Section&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;formatter-plugins---out_file&quot;&gt;Formatter Plugins - out_file&lt;/h3&gt;

&lt;p&gt;다음은 테스트에서 사용하게 될 out_file 설정 예시이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;format&amp;gt;
    @type out_file
    output_tag false
    output_time true
  &amp;lt;/format&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 설정 예시에 관하여 간단하게 설명하면 다음과 같다. required 설정은 녹색으로 표기하였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;@type : out_file을 사용한다. 자세한 내용은 아래의 링크를 참고한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;output_tag : tag(이벤트 명)의 출력 여부를 설정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;output_time : 로그 수집 시간 출력 여부를 설정한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자세한 내용은 아래의 링크를 통하여 확인한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.fluentd.org/formatter/out_file&quot;&gt;Fluentd - Formatter Plugins : out_file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;테스트-과정-1&quot;&gt;테스트 과정&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;입력용 파일을 생성하고 정상적으로 생성 되었는지 확인한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch filter_grep_input.log | stat filter_grep_input.log
16777223 8232044 -rw-r--r-- 1 kevin staff 0 0 &quot;Aug 19 20:20:14 2019&quot; &quot;Aug 19 20:20:14 2019&quot; &quot;Aug 19 20:20:14 2019&quot; &quot;Aug 19 20:20:14 2019&quot; 4096 0 0 filter_grep_input.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;td-agent 설정 경로를 수정한다.&lt;/p&gt;

    &lt;p&gt;다음은 경로 예시이다.&lt;/p&gt;

    &lt;p&gt;/Users/kevin/dev/fluentd/test/filter_grep/config/td-agent.conf&lt;/p&gt;

    &lt;p&gt;위에서 수정한 경로에 td-agent 설정파일을 생성한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch td-agent.conf | stat td-agent.conf
16777223 8226646 -rw-r--r-- 1 kevin staff 0 0 &quot;Aug 19 15:54:04 2019&quot; &quot;Aug 19 15:54:04 2019&quot; &quot;Aug 19 15:54:04 2019&quot; &quot;Aug 19 15:54:04 2019&quot; 4096 0 0 td-agent.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;td-agent 설정 파일을 다음과 같이 수정한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat td-agent.conf
    
&amp;lt;source&amp;gt;
  @type tail
  tag filter_grep
  path /Users/kevin/dev/fluentd/test/filter_grep/source/*
  pos_file /Users/kevin/dev/fluentd/test/filter_grep/pos/filter_grep.pos
  &amp;lt;parse&amp;gt;
    @type apache2
  &amp;lt;/parse&amp;gt;
  refresh_interval 5s
&amp;lt;/source&amp;gt;
    
&amp;lt;filter filter_grep*&amp;gt;
  @type grep
  &amp;lt;regexp&amp;gt;
    key method
    pattern ^POST$
  &amp;lt;/regexp&amp;gt;
  &amp;lt;regexp&amp;gt;
    key code
    pattern ^[1-1|3-5]\d\d$
  &amp;lt;/regexp&amp;gt;
&amp;lt;/filter&amp;gt;
 
&amp;lt;match filter_grep*&amp;gt;
  @type file
  path /Users/kevin/dev/fluentd/test/filter_grep/match/${tag}_output
  add_path_suffix true
  path_suffix &quot;.log&quot;
  append true
  &amp;lt;buffer tag&amp;gt;
    flush_mode interval
    flush_interval 10s
  &amp;lt;/buffer&amp;gt;
  &amp;lt;format&amp;gt;
    @type out_file
    output_tag false
    output_time true
  &amp;lt;/format&amp;gt;
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;td-agent를 실행한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;입력용 파일에 로그를 출력하고 정상적으로 출력 되었는지 확인한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ cat source/filter_grep_input.log
127.0.0.1 - - [20/Aug/2019:00:40:00 +0900] &quot;GET /apache_pb.gif HTTP/1.0&quot; 100 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:01 +0900] &quot;POST /regist.html HTTP/1.0&quot; 200 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:02 +0900] &quot;POST /regist.html HTTP/1.0&quot; 300 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:03 +0900] &quot;GET /apache_pb.gif HTTP/1.0&quot; 400 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:04 +0900] &quot;POST /regist.html HTTP/1.0&quot; 500 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:05 +0900] &quot;POST /regist.html HTTP/1.0&quot; 100 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:06 +0900] &quot;GET /apache_pb.gif HTTP/1.0&quot; 200 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:07 +0900] &quot;POST /regist.html HTTP/1.0&quot; 300 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:08 +0900] &quot;POST /regist.html HTTP/1.0&quot; 400 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:09 +0900] &quot;GET /apache_pb.gif HTTP/1.0&quot; 500 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;출력용 파일이 정상적으로 출력 되었는지 확인한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ cat match/filter_grep_output.log
2019-08-20T00:40:02+09:00   {&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;user&quot;:null,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/regist.html&quot;,&quot;code&quot;:300,&quot;size&quot;:2326,&quot;referer&quot;:&quot;http://www.example.com/start.html&quot;,&quot;agent&quot;:&quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;}
2019-08-20T00:40:04+09:00   {&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;user&quot;:null,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/regist.html&quot;,&quot;code&quot;:500,&quot;size&quot;:2326,&quot;referer&quot;:&quot;http://www.example.com/start.html&quot;,&quot;agent&quot;:&quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;}
2019-08-20T00:40:05+09:00   {&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;user&quot;:null,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/regist.html&quot;,&quot;code&quot;:100,&quot;size&quot;:2326,&quot;referer&quot;:&quot;http://www.example.com/start.html&quot;,&quot;agent&quot;:&quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;}
2019-08-20T00:40:07+09:00   {&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;user&quot;:null,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/regist.html&quot;,&quot;code&quot;:300,&quot;size&quot;:2326,&quot;referer&quot;:&quot;http://www.example.com/start.html&quot;,&quot;agent&quot;:&quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;}
2019-08-20T00:40:08+09:00   {&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;user&quot;:null,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/regist.html&quot;,&quot;code&quot;:400,&quot;size&quot;:2326,&quot;referer&quot;:&quot;http://www.example.com/start.html&quot;,&quot;agent&quot;:&quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;테스트-결과-1&quot;&gt;테스트 결과&lt;/h2&gt;

&lt;p&gt;테스트 결과 grep 타입을 사용하여 필터링 가능함을 확인하였다.&lt;/p&gt;

&lt;p&gt;테스트 과정에서 다음과 같은 요구사항에 대하여 필터링 되는지 확인하였다.&lt;/p&gt;

&lt;p&gt;요청 method가 “POST”이면서 status가 2XX이 아닌 경우&lt;/p&gt;

&lt;p&gt;다음은 위의 요구사항대로 필터링된 예시이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1 - - [20/Aug/2019:00:40:00 +0900] &quot;GET /apache_pb.gif HTTP/1.0&quot; 100 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:01 +0900] &quot;POST /regist.html HTTP/1.0&quot; 200 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:02 +0900] &quot;POST /regist.html HTTP/1.0&quot; 300 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:03 +0900] &quot;GET /apache_pb.gif HTTP/1.0&quot; 400 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:04 +0900] &quot;POST /regist.html HTTP/1.0&quot; 500 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:05 +0900] &quot;POST /regist.html HTTP/1.0&quot; 100 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:06 +0900] &quot;GET /apache_pb.gif HTTP/1.0&quot; 200 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:07 +0900] &quot;POST /regist.html HTTP/1.0&quot; 300 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:08 +0900] &quot;POST /regist.html HTTP/1.0&quot; 400 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
127.0.0.1 - - [20/Aug/2019:00:40:09 +0900] &quot;GET /apache_pb.gif HTTP/1.0&quot; 500 2326 &quot;http://www.example.com/start.html&quot; &quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2019-08-20T00:40:02+09:00   {&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;user&quot;:null,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/regist.html&quot;,&quot;code&quot;:300,&quot;size&quot;:2326,&quot;referer&quot;:&quot;http://www.example.com/start.html&quot;,&quot;agent&quot;:&quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;}
2019-08-20T00:40:04+09:00   {&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;user&quot;:null,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/regist.html&quot;,&quot;code&quot;:500,&quot;size&quot;:2326,&quot;referer&quot;:&quot;http://www.example.com/start.html&quot;,&quot;agent&quot;:&quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;}
2019-08-20T00:40:05+09:00   {&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;user&quot;:null,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/regist.html&quot;,&quot;code&quot;:100,&quot;size&quot;:2326,&quot;referer&quot;:&quot;http://www.example.com/start.html&quot;,&quot;agent&quot;:&quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;}
2019-08-20T00:40:07+09:00   {&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;user&quot;:null,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/regist.html&quot;,&quot;code&quot;:300,&quot;size&quot;:2326,&quot;referer&quot;:&quot;http://www.example.com/start.html&quot;,&quot;agent&quot;:&quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;}
2019-08-20T00:40:08+09:00   {&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;user&quot;:null,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/regist.html&quot;,&quot;code&quot;:400,&quot;size&quot;:2326,&quot;referer&quot;:&quot;http://www.example.com/start.html&quot;,&quot;agent&quot;:&quot;Mozilla/4.08 [en] (Win98; I ;Nav)&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;필터링 후에는 다음과 같은 형식으로 저장됨을 알 수 있다.&lt;/p&gt;

&lt;p&gt;로그를 기록한 날짜 { host : “클라이언트 아이피”, … 중략… agent : “클라이언트 브라우저 식별정보”}&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;테스트-케이스--로그를-파싱하여-저장하는-경우-filter---parser&quot;&gt;테스트 케이스 : 로그를 파싱하여 저장하는 경우 (Filter - parser)&lt;/h1&gt;

&lt;p&gt;td-agent로 로그를 수집하여 저장하는 과정에서 원하는 형식으로 파싱하여 저장해야 하는 경우가 있다.&lt;/p&gt;

&lt;p&gt;이러한 경우에 Filter plugin중 parser 타입을 사용하면된다.&lt;/p&gt;

&lt;h2 id=&quot;테스트-목적-3&quot;&gt;테스트 목적&lt;/h2&gt;

&lt;p&gt;이 테스트는 학습차원에서 다음과 같은 td-agent의 동작 확인이 목적이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;파일에서 로그를 수집하여 저장하는 과정에서 Filter plugin의 parser를 사용하여 파싱 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;테스트-시나리오-2&quot;&gt;테스트 시나리오&lt;/h2&gt;

&lt;p&gt;이 테스트는 다음과 같은 시나리오를 바탕으로 진행된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Apache access log가 입력용 파일에 생성된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;td-agent로 Apache access log를 수집하고 파싱한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파싱된 결과는 출력용 파일에 json 형태로 출력한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;테스트에-필요한-사전-지식&quot;&gt;테스트에 필요한 사전 지식&lt;/h2&gt;

&lt;h3 id=&quot;appache-access-log&quot;&gt;Appache Access Log&lt;/h3&gt;

&lt;p&gt;테스트에서 다음과 같은 Common 로그 형식(Common Log Format)을 사용한다.&lt;/p&gt;

&lt;p&gt;%h %l %u %t \“%r\” %&amp;gt;s %b&lt;/p&gt;

&lt;p&gt;%h : 서버에 요청을 한 클라이언트의 IP 주소를 의미한다.&lt;/p&gt;

&lt;p&gt;%l : 클라이언트 컴퓨터의 identd가 제공하는 클라이언트의 RFC 1413 신원이다. 만약 요청한 정보가 없다면 “-“로 표기한다.&lt;/p&gt;

&lt;p&gt;%u : HTTP 인증으로 알아낸 문서를 요청한 사용자의 userid이다. 문서를 암호로 보호하지 않는다면 “-“ 으로 표기한다.&lt;/p&gt;

&lt;p&gt;%t : 서버가 요청처리를 마친 시간을 의미한다. [day/month/year:hour:minute:second zone] 형식이다.&lt;/p&gt;

&lt;p&gt;\“%r\” : 클라이언트의 요청줄을 쌍따옴표로 묶어 표현한다. &lt;/p&gt;

&lt;p&gt;%&amp;gt;s : 서버가 클라이언트에게 보내는 상태코드이다.&lt;/p&gt;

&lt;p&gt;%b : 응답 헤더를 제외하고 클라이언트에게 보내는 내용의 크기를 나타낸다. 보내는 내용이 없다면 “-“으로 표기한다.&lt;/p&gt;

&lt;p&gt;다음은 Common 로그 형식의 예시이다.&lt;/p&gt;

&lt;p&gt;127.0.0.1 - frank [10/Oct/2000:13:55:36 -0700] “GET /apache_pb.gif HTTP/1.0” 200 2326&lt;/p&gt;

&lt;p&gt;자세한 내용은 다음의 링크를 참고한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://httpd.apache.org/docs/2.4/ko/logs.html&quot;&gt;로그파일 - Apache HTTP Server Version 2.4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;json&quot;&gt;Json&lt;/h3&gt;

&lt;p&gt;json에 대한 설명은 다음의 링크를 참고한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://json.org/&quot;&gt;JSON - 공식 사이트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;source-plugin---tail-2&quot;&gt;Source Plugin - tail&lt;/h3&gt;

&lt;p&gt;다음은 테스트에서 사용할 tail 설정 예시이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;source&amp;gt;
  @type tail
  path /Users/kevin/dev/fluentd/test/filter_parser/source/*
  pos_file /Users/kevin/dev/fluentd/test/filter_parser/pos/pos_file.pos
  tag filter_parser
  &amp;lt;parse&amp;gt;
    @type none
  &amp;lt;/parse&amp;gt;
  refresh_interval 1s
&amp;lt;/source&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 설정 예시에 관하여 간단하게 설명하면 다음과 같다. required 설정은 녹색으로 표기하였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;@type : tail type을 사용한다. 자세한 설명은 아래의 링크를 통하여 확인한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;path : 읽어오고자 하는 파일의 경로를 의미한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pos_file : td-agent는 파일마다 읽었던 위치를 파일로 저장해두는데 그 파일의 경로를 지정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;parse&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;@type : none을 사용한다. 자세한 설명은 아래의 링크를 통하여 확인한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tag : 이벤트를 구분짓기 위한 tag name을 의미한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;refresh_interval : td-agent가 수집하려는 파일리스트의 갱신주기를 의미한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자세한 내용은 아래의 링크를 참고한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.fluentd.org/input/tail&quot;&gt;Fluentd - Input Plugin : tail&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.fluentd.org/parser/none&quot;&gt;Fluentd - Parser Plugin : none&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;filter-plugin---parser&quot;&gt;Filter Plugin - parser&lt;/h3&gt;

&lt;p&gt;다음은 테스트에서 사용하게 될 parser 설정 예시이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;filter filter_parser*&amp;gt;
  @type parser
  key_name message
  &amp;lt;parse&amp;gt;
    @type regexp
    expression ^(?&amp;lt;host&amp;gt;[^ ]*) (?&amp;lt;identd&amp;gt;[^ ]*) (?&amp;lt;user&amp;gt;[^ ]*) \[(?&amp;lt;time&amp;gt;[^\]]*)\] &quot;(?&amp;lt;method&amp;gt;\S+)(?: +(?&amp;lt;path&amp;gt;[^ ]*) +\S*)?&quot; (?&amp;lt;code&amp;gt;[^ ]*) (?&amp;lt;size&amp;gt;[^ ]*)$
    time_format %d/%b/%Y:%H:%M:%S %z
  &amp;lt;/parse&amp;gt;
&amp;lt;/filter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 설정 예시에 관하여 간단하게 설명하면 다음과 같다. required 설정은 녹색으로 표기하였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&amp;lt;filter pattern&amp;gt; : pattern 부분에 filter plugin을 적용시키고자 하는 이벤트(tag명)를 명시한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@type : parser를 사용한다. 자세한 내용은 아래의 링크를 참고한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;key_name : 파싱하고자 하는 필드명을 명시한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;parse : 아래의 &lt;strong&gt;Parser Plugins - regexp&lt;/strong&gt;를 참고한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자세한 내용은 아래의 링크를 참고한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.fluentd.org/filter/parser&quot;&gt;Fluentd - Filter Plugin : parser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;parser-plugin---regexp&quot;&gt;Parser Plugin - regexp&lt;/h3&gt;

&lt;p&gt;다음은 테스트에서 사용하게 될 regexp 설정 예시이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;parse&amp;gt;
    @type regexp
    expression ^(?&amp;lt;host&amp;gt;[^ ]*) [^ ]* (?&amp;lt;user&amp;gt;[^ ]*) \[(?&amp;lt;time&amp;gt;[^\]]*)\] &quot;(?&amp;lt;method&amp;gt;\S+)(?: +(?&amp;lt;path&amp;gt;[^ ]*) +\S*)?&quot; (?&amp;lt;code&amp;gt;[^ ]*) (?&amp;lt;size&amp;gt;[^ ]*)$
    time_format %d/%b/%Y:%H:%M:%S %z
  &amp;lt;/parse&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 설정 예시에 관하여 간단하게 설명하면 다음과 같다. required 설정은 녹색으로 표기하였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;@type : regexp를 사용한다. 자세한 내용은 아래의 링크를 참고한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;expression : 파싱하고자 하는 형식에 대하여 “Ruby의 정규표현식 표현”을 사용하여 표현한다. 위의 예시는 Apache access log중 Common 로그 형식을 의미한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;time_format : 시간형식을 어떻게 지정할 지에 대한 형식을 지정한다. 위의 예시의 샘플은 “20/Aug/2019:13:55:36 +0900” 이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자세한 내용은 아래의 링크를 참고한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.fluentd.org/parser/regexp&quot;&gt;Fluentd - Parser Plugins : regexp&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://ruby-doc.org/core-2.4.1/Regexp.html#class-Regexp-label-Options&quot;&gt;Ruby’s Regexp document&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;match-plugin---file-2&quot;&gt;Match Plugin - file&lt;/h3&gt;

&lt;p&gt;다음은 테스트에서 사용하게 될 file 설정 예시이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;match filter_parser*&amp;gt;
  @type file
  path /Users/kevin/dev/fluentd/test/filter_parser/match/${tag}_output
  path_suffix &quot;.json&quot;
  add_path_suffix true  
  append true
  &amp;lt;format&amp;gt;
    @type json
  &amp;lt;/format&amp;gt;
  &amp;lt;buffer tag&amp;gt;
    flush_mode interval
    flush_interval 10s
  &amp;lt;/buffer&amp;gt;
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 설정 예시에 관하여 간단하게 설명하면 다음과 같다. required 설정은 녹색으로 표기하였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&amp;lt;match pattern&amp;gt; : pattern 부분에 match plugin을 적용시키고자 하는 이벤트(tag명)를 명시한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@type : file을 사용한다. 자세한 내용은 아래의 링크를 참고한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;path : 출력할 파일의 경로를 의미한다. 예약어(예: tag)를 사용할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;path_suffix : 확장자명을 지정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;add_path_suffix : path_suffix 사용유무를 지정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;append : 한 파일에 출력하는지 여부를 지정한다. 원할한 테스트를 위하여 설정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;format&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;@type : json으로 설정한다. 자세한 내용은 아래의 링크를 참고한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;buffer : 자세한 내용은 아래의 링크를 참고한다. 원할한 테스트를 위하여 설정한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자세한 내용은 아래의 링크를 통하여 확인한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.fluentd.org/output/file&quot;&gt;Fluentd - Output plugins : file&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.fluentd.org/formatter/json&quot;&gt;Fluentd - Formatter plugins : json&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.fluentd.org/configuration/buffer-section&quot;&gt;Fluentd - Config : Buffer Section&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;테스트-과정-2&quot;&gt;테스트 과정&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;파일을 생성하고 정상적으로 생성 되었는지 확인한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch filter_parser_input.log | stat filter_parser_input.log
16777223 8251706 -rw-r--r-- 1 kevin staff 0 0 &quot;Aug 20 18:26:05 2019&quot; &quot;Aug 20 18:26:05 2019&quot; &quot;Aug 20 18:26:05 2019&quot; &quot;Aug 20 18:26:05 2019&quot; 4096 0 0 filter_parser_input.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;td-agent 설정파일의 경로를 수정한다.&lt;br /&gt;
다음은 경로예시이다.&lt;/p&gt;

    &lt;p&gt;/Users/kevin/dev/fluentd/test/filter_parser/config/td-agent.conf&lt;/p&gt;

    &lt;p&gt;위에서 수정한 경로에 td-agent 설정파일을 생성한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch td-agent.conf | stat td-agent.conf
16777223 8251793 -rw-r--r-- 1 kevin staff 0 0 &quot;Aug 20 18:29:43 2019&quot; &quot;Aug 20 18:29:43 2019&quot; &quot;Aug 20 18:29:43 2019&quot; &quot;Aug 20 18:29:43 2019&quot; 4096 0 0 td-agent.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;td-agent 설정 파일을 다음과 같이 수정한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat td-agent.conf
&amp;lt;source&amp;gt;
  @type tail
  path /Users/kevin/dev/fluentd/test/filter_parser/source/*
  pos_file /Users/kevin/dev/fluentd/test/filter_parser/pos/pos_file.pos
  tag filter_parser
  &amp;lt;parse&amp;gt;
    @type none
  &amp;lt;/parse&amp;gt;
  refresh_interval 1s
&amp;lt;/source&amp;gt;
&amp;lt;filter filter_parser*&amp;gt;
  @type parser
  key_name message
  &amp;lt;parse&amp;gt;
    @type regexp
    expression ^(?&amp;lt;host&amp;gt;[^ ]*) (?&amp;lt;identd&amp;gt;[^ ]*) (?&amp;lt;user&amp;gt;[^ ]*) \[(?&amp;lt;time&amp;gt;[^\]]*)\] &quot;(?&amp;lt;method&amp;gt;\S+)(?: +(?&amp;lt;path&amp;gt;[^ ]*) +\S*)?&quot; (?&amp;lt;code&amp;gt;[^ ]*) (?&amp;lt;size&amp;gt;[^ ]*)$
    time_format %d/%b/%Y:%H:%M:%S %z
  &amp;lt;/parse&amp;gt;
&amp;lt;/filter&amp;gt;
&amp;lt;match filter_parser*&amp;gt;
  @type file
  path /Users/kevin/dev/fluentd/test/filter_parser/match/${tag}_output
  add_path_suffix true
  path_suffix &quot;.json&quot;
  append true
  &amp;lt;format&amp;gt;
    @type json
  &amp;lt;/format&amp;gt;
  &amp;lt;buffer tag&amp;gt;
    flush_mode interval
    flush_interval 10s
  &amp;lt;/buffer&amp;gt;
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;이제 td-agent를 실행한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;입력용 파일에 로그를 출력하고 정상적으로 출력 되었는지 확인한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat source/filter_parser_input.log
127.0.0.1 - - [20/Aug/2019:00:40:00 +0900] &quot;GET /apache_pb.gif HTTP/1.0&quot; 100 2326
127.0.0.1 - - [20/Aug/2019:00:40:01 +0900] &quot;POST /registration.html HTTP/1.0&quot; 200 2326
127.0.0.1 - - [20/Aug/2019:00:40:02 +0900] &quot;POST /registration.html HTTP/1.0&quot; 300 2326
127.0.0.1 - - [20/Aug/2019:00:40:03 +0900] &quot;GET /apache_pb.gif HTTP/1.0&quot; 400 2326
127.0.0.1 - - [20/Aug/2019:00:40:04 +0900] &quot;POST /registration.html HTTP/1.0&quot; 500 2326
127.0.0.1 - - [20/Aug/2019:00:40:05 +0900] &quot;POST /registration.html HTTP/1.0&quot; 100 2326
127.0.0.1 - - [20/Aug/2019:00:40:06 +0900] &quot;GET /apache_pb.gif HTTP/1.0&quot; 200 2326
127.0.0.1 - - [20/Aug/2019:00:40:07 +0900] &quot;POST /registration.html HTTP/1.0&quot; 300 2326
127.0.0.1 - - [20/Aug/2019:00:40:08 +0900] &quot;POST /registration.html HTTP/1.0&quot; 400 2326
127.0.0.1 - - [20/Aug/2019:00:40:09 +0900] &quot;GET /apache_pb.gif HTTP/1.0&quot; 500 2326
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;출력용 파일이 정상적으로 출력 되었는지 확인한다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat match/filter_parser_output.json
{&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;identd&quot;:&quot;-&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/registration.html&quot;,&quot;code&quot;:&quot;300&quot;,&quot;size&quot;:&quot;2326&quot;}
{&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;identd&quot;:&quot;-&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;path&quot;:&quot;/apache_pb.gif&quot;,&quot;code&quot;:&quot;400&quot;,&quot;size&quot;:&quot;2326&quot;}
{&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;identd&quot;:&quot;-&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/registration.html&quot;,&quot;code&quot;:&quot;500&quot;,&quot;size&quot;:&quot;2326&quot;}
{&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;identd&quot;:&quot;-&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/registration.html&quot;,&quot;code&quot;:&quot;100&quot;,&quot;size&quot;:&quot;2326&quot;}
{&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;identd&quot;:&quot;-&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;path&quot;:&quot;/apache_pb.gif&quot;,&quot;code&quot;:&quot;200&quot;,&quot;size&quot;:&quot;2326&quot;}
{&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;identd&quot;:&quot;-&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/registration.html&quot;,&quot;code&quot;:&quot;300&quot;,&quot;size&quot;:&quot;2326&quot;}
{&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;identd&quot;:&quot;-&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/registration.html&quot;,&quot;code&quot;:&quot;400&quot;,&quot;size&quot;:&quot;2326&quot;}
{&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;identd&quot;:&quot;-&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;path&quot;:&quot;/apache_pb.gif&quot;,&quot;code&quot;:&quot;500&quot;,&quot;size&quot;:&quot;2326&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;테스트-결과-2&quot;&gt;테스트 결과&lt;/h2&gt;

&lt;p&gt;테스트 결과 parser 타입을 사용하여 파싱이 가능함을 확인하였다.&lt;/p&gt;

&lt;p&gt;테스트 과정에서 Apache access log를 수집하여 json 형식의 파일로 저장하는 것을 확인하였다.&lt;/p&gt;

&lt;p&gt;다음은 파싱전후의 예시이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1 - - [20/Aug/2019:00:40:00 +0900] &quot;GET /apache_pb.gif HTTP/1.0&quot; 100 2326
127.0.0.1 - - [20/Aug/2019:00:40:01 +0900] &quot;POST /registration.html HTTP/1.0&quot; 200 2326
127.0.0.1 - - [20/Aug/2019:00:40:02 +0900] &quot;POST /registration.html HTTP/1.0&quot; 300 2326
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;identd&quot;:&quot;-&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/registration.html&quot;,&quot;code&quot;:&quot;300&quot;,&quot;size&quot;:&quot;2326&quot;}
{&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;identd&quot;:&quot;-&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;path&quot;:&quot;/apache_pb.gif&quot;,&quot;code&quot;:&quot;400&quot;,&quot;size&quot;:&quot;2326&quot;}
{&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;identd&quot;:&quot;-&quot;,&quot;user&quot;:&quot;-&quot;,&quot;method&quot;:&quot;POST&quot;,&quot;path&quot;:&quot;/registration.html&quot;,&quot;code&quot;:&quot;500&quot;,&quot;size&quot;:&quot;2326&quot;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파싱된 후 저장된 json형식의 로그는 다음과 같은 형식으로 저장된다.&lt;/p&gt;

&lt;p&gt;{“host”: “클라이언트 아이피”, “identd” : “클라이언트 RFC1413 신원”, “user” : “클라이언트 이름”, “method” : “http 메서드”, “path”: “접근하려는 경로”, “code” : “http 상태코드”, “size” : “응답 용량”}&lt;/p&gt;</content><author><name>Andro</name><email>seongwoo.dev@gmail.com</email></author><category term="Fluentd" /><summary type="html">이 문서는 Fluentd의 학습 차원에서 다음과 같은 테스트 케이스 별 Filter plugin의 단순 동작 확인에 목적을 두고 있다.</summary></entry><entry><title type="html">Fluentd - 입력 로그 파일 경로 설정</title><link href="http://localhost:4000/fluentd/fluentd_file_path_test/" rel="alternate" type="text/html" title="Fluentd - 입력 로그 파일 경로 설정" /><published>2019-12-10T00:00:00+09:00</published><updated>2019-12-10T00:00:00+09:00</updated><id>http://localhost:4000/fluentd/fluentd_file_path_test</id><content type="html" xml:base="http://localhost:4000/fluentd/fluentd_file_path_test/">&lt;h1 id=&quot;테스트-목적&quot;&gt;테스트 목적&lt;/h1&gt;

&lt;p&gt;Fluentd(이하 td-agent)로 로그 파일의 로그를 수집할 때 파일 경로에 관하여 다음과 같은 케이스가 존재한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;파일 경로를 지정하는 경우 (예 : log/access.log)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;디렉터리와 확장자만 지정하는 경우 (예 : log/*.log)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;디렉터리와 파일명의 prefix만 지정하는 경우 (예: log/access*)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 테스트는 위와 같은 케이스에 대하여 td-agent를 실행하고 로그 파일을 생성할 때 td-agent의 동작을 확인하는 데에 목적이 있다.&lt;/p&gt;

&lt;h1 id=&quot;테스트-환경&quot;&gt;테스트 환경&lt;/h1&gt;

&lt;p&gt;테스트 환경은 다음과 같다.&lt;/p&gt;

&lt;p&gt;OS : macOS Mojave 10.14.6&lt;/p&gt;

&lt;p&gt;td-agent : v1.0.2&lt;/p&gt;

&lt;h1 id=&quot;테스트에-필요한-사전-지식&quot;&gt;테스트에 필요한 사전 지식&lt;/h1&gt;

&lt;p&gt;다음과 같은 사전 지식이 필요하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Source Plug In : tail&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;read_from_head에 관한 옵션&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Match Plug In : match&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;td-agent 관련 정보&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;td-agent 실행, 종료&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;td-agent 동작 로그 확인 방법&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;td-agent 설정 경로&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;source-plug-in--tail&quot;&gt;Source Plug In : tail&lt;/h2&gt;

&lt;p&gt;다음 링크들을 참고 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.fluentd.org/input/tail&quot;&gt;Fluentd - Input Plugin : tail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;read_from_head-옵션&quot;&gt;read_from_head 옵션&lt;/h3&gt;

&lt;p&gt;다음 링크들을 참고 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.fluentd.org/input/tail#read_from_head&quot;&gt;Fluentd - Input Plugin : tail - read_from_head&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;match-plug-in--match&quot;&gt;Match Plug In : match&lt;/h2&gt;

&lt;p&gt;다음 링크들을 참고 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.fluentd.org/output/file&quot;&gt;Fluentd - Output Plugin : file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;td-agent-기초-사용법&quot;&gt;td-agent 기초 사용법&lt;/h2&gt;

&lt;p&gt;Fluentd 기초 사용법을 확인하여 td-agent 기초 동작을 확인하면 된다.&lt;/p&gt;

&lt;h1 id=&quot;테스트간-공통사항&quot;&gt;테스트간 공통사항&lt;/h1&gt;

&lt;p&gt;td-agent의 설정 파일의 경로를 다음과 같이 지정한다.&lt;/p&gt;

&lt;p&gt;/Users/kevin/dev/fluentd/test/file_path/config/td-agent.conf&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat /opt/td-agent/usr/sbin/td-agent

... 중략 ...

ENV[&quot;FLUENT_CONF&quot;]=&quot;/Users/kevin/dev/fluentd/test/file_path/config/td-agent.conf&quot;

... 중략 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;케이스--파일-경로를-지정하는-경우&quot;&gt;케이스 : 파일 경로를 지정하는 경우&lt;/h1&gt;

&lt;p&gt;td-agent 설정 파일을 다음과 같이 수정하고 실행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat config/td-agent.log 
&amp;lt;source&amp;gt;
  @type tail
  tag file_path
  path /Users/kevin/dev/fluentd/test/file_path/source/fixed_file_path.log
  pos_file /Users/kevin/dev/fluentd/test/file_path/pos/pos_file.pos
  &amp;lt;parse&amp;gt;
    @type none
  &amp;lt;/parse&amp;gt;
  refresh_interval 5s
  read_from_head true
&amp;lt;/source&amp;gt;

&amp;lt;match file_path*&amp;gt;
  @type file
  path /Users/kevin/dev/fluentd/test/file_path/match/${tag}_output
  add_path_suffix true
  path_suffix &quot;.log&quot;
  append true
  &amp;lt;buffer tag&amp;gt;
    flush_mode interval
    flush_interval 5s
  &amp;lt;/buffer&amp;gt;
  &amp;lt;format&amp;gt;
    @type out_file
    output_tag false
    output_time true
  &amp;lt;/format&amp;gt;
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo launchctl load td-agent.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 로그를 파일에 저장한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;fixed_file_path_line_1&quot; &amp;gt; source/fixed_file_path.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 td-agent가 파일 생성을 인지한 것을 확인한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat /var/log/td-agent/td-agent.log
 
... 중략 ...
 
2019-08-30 14:28:35 +0900 [info]: #0 following tail of /Users/kevin/dev/fluentd/test/file_path/source/fixed_file_path.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;출력용 파일을 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tail -10f match/file_path_output.log
2019-08-30T14:28:35+09:00	{&quot;message&quot;:&quot;fixed_file_path_line_1&quot;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다시 한번 다음과 같이 파일에 로그를 저장한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;fixed_file_path_line_2&quot; &amp;gt;&amp;gt; source/fixed_file_path.log
$ echo &quot;fixed_file_path_line_3&quot; &amp;gt;&amp;gt; source/fixed_file_path.log
$ echo &quot;fixed_file_path_line_4&quot; &amp;gt;&amp;gt; source/fixed_file_path.log
$ echo &quot;fixed_file_path_line_5&quot; &amp;gt;&amp;gt; source/fixed_file_path.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;출력용 파일을 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tail -10f match/file_path_output.log
2019-08-30T14:28:35+09:00	{&quot;message&quot;:&quot;fixed_file_path_line_1&quot;}
2019-08-30T14:29:30+09:00	{&quot;message&quot;:&quot;fixed_file_path_line_2&quot;}
2019-08-30T14:29:34+09:00	{&quot;message&quot;:&quot;fixed_file_path_line_3&quot;}
2019-08-30T14:29:38+09:00	{&quot;message&quot;:&quot;fixed_file_path_line_4&quot;}
2019-08-30T14:29:47+09:00	{&quot;message&quot;:&quot;fixed_file_path_line_5&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 결과를 정리하면 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;td-agent 설정 파일상의 입력 파일이 실제로 존재하지 않아도 td-agent는 실행된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;입력용 파일이 생성되고 로그를 저장하면 출력용 파일에 로그의 형식은 바뀌지만 로그가 저장된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;케이스-디렉터리와-확장자만-지정하는-경우&quot;&gt;케이스 : 디렉터리와 확장자만 지정하는 경우&lt;/h1&gt;

&lt;p&gt;td-agent 설정 파일을 다음과 같이 수정하고 실행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat config/td-agent.log 
&amp;lt;source&amp;gt;
  @type tail
  tag file_path
  path /Users/kevin/dev/fluentd/test/file_path/source/*.log
  pos_file /Users/kevin/dev/fluentd/test/file_path/pos/pos_file.pos
  &amp;lt;parse&amp;gt;
    @type none
  &amp;lt;/parse&amp;gt;
  refresh_interval 5s
  read_from_head true
&amp;lt;/source&amp;gt;

&amp;lt;match file_path*&amp;gt;
  @type file
  path /Users/kevin/dev/fluentd/test/file_path/match/${tag}_output
  add_path_suffix true
  path_suffix &quot;.log&quot;
  append true
  &amp;lt;buffer tag&amp;gt;
    flush_mode interval
    flush_interval 5s
  &amp;lt;/buffer&amp;gt;
  &amp;lt;format&amp;gt;
    @type out_file
    output_tag false
    output_time true
  &amp;lt;/format&amp;gt;
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo launchctl load td-agent.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;log에-로그-저장&quot;&gt;*.log에 로그 저장&lt;/h3&gt;

&lt;p&gt;다음과 같이 로그를 파일에 저장한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;filename_extension_log_line_1&quot; &amp;gt; source/log_file.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 td-agent가 파일 생성을 인지한 것을 확인한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat /var/log/td-agent/td-agent.log
 
... 중략 ...
 
2019-08-30 15:05:01 +0900 [info]: #0 following tail of /Users/kevin/dev/fluentd/test/file_path/source/log_file.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;출력용 파일을 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tail -10f match/file_path_output.log
2019-08-30T15:05:01+09:00	{&quot;message&quot;:&quot;filename_extension_log_line_1&quot;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다시 한번 다음과 같이 파일에 로그를 저장한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;filename_extension_log_line_2&quot; &amp;gt;&amp;gt; source/log_file.log
$ echo &quot;filename_extension_log_line_3&quot; &amp;gt;&amp;gt; source/log_file.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;출력용 파일을 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tail -10f match/file_path_output.log
2019-08-30T15:05:01+09:00	{&quot;message&quot;:&quot;filename_extension_log_line_1&quot;}
2019-08-30T15:08:01+09:00	{&quot;message&quot;:&quot;filename_extension_log_line_2&quot;}
2019-08-30T15:08:06+09:00	{&quot;message&quot;:&quot;filename_extension_log_line_3&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;log가-아닌-경우&quot;&gt;*.log가 아닌 경우&lt;/h3&gt;

&lt;p&gt;다음과 같이 로그를 파일에 저장한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;filename_extension_txt_line_1&quot; &amp;gt; source/text_file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 td-agent가 파일 생성을 인지하지 못한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat /var/log/td-agent/td-agent.log
 
... 중략 ...

파일 생성 인지 관한 로그가 저장되지 않는다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;출력용 파일을 확인 했을때 로그가 저장되지 않는 것을 알 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tail -10f match/file_path_output.log
입력용 파일에 저장한 로그가 저장되지 않는다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다시 한번 다음과 같이 파일에 로그를 저장한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;filename_extension_txt_line_2&quot; &amp;gt;&amp;gt; source/text_file.txt
$ echo &quot;filename_extension_txt_line_3&quot; &amp;gt;&amp;gt; source/text_file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;출력용 파일을 확인 했을때 로그가 저장되지 않는 것을 알 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tail -10f match/file_path_output.log
입력용 파일에 저장한 로그가 저장되지 않는다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 결과를 정리하면 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;td-agent 설정 파일상 설정한 경로와 확장자가 일치하는 파일의 경우&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;입력용 파일이 생성되고 로그를 저장하면 출력용 파일에 로그의 형식은 바뀌지만 로그가 저장된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;td-agent 설정 파일상 설정한 경로는 일치하고 확장자가 일치하지 않는 경우&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;출력용 파일에 로그가 저장되지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;케이스-디렉터리와-파일명의-prefix만-지정하는-경우&quot;&gt;케이스 : 디렉터리와 파일명의 prefix만 지정하는 경우&lt;/h1&gt;

&lt;p&gt;td-agent 설정 파일을 다음과 같이 수정하고 실행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat config/td-agent.log 
&amp;lt;source&amp;gt;
  @type tail
  tag file_path
  path /Users/kevin/dev/fluentd/test/file_path/source/prefix*
  pos_file /Users/kevin/dev/fluentd/test/file_path/pos/pos_file.pos
  &amp;lt;parse&amp;gt;
    @type none
  &amp;lt;/parse&amp;gt;
  refresh_interval 5s
  read_from_head true
&amp;lt;/source&amp;gt;

&amp;lt;match file_path*&amp;gt;
  @type file
  path /Users/kevin/dev/fluentd/test/file_path/match/${tag}_output
  add_path_suffix true
  path_suffix &quot;.log&quot;
  append true
  &amp;lt;buffer tag&amp;gt;
    flush_mode interval
    flush_interval 5s
  &amp;lt;/buffer&amp;gt;
  &amp;lt;format&amp;gt;
    @type out_file
    output_tag false
    output_time true
  &amp;lt;/format&amp;gt;
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo launchctl load td-agent.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;prefix가-일치하는-경우&quot;&gt;prefix가 일치하는 경우&lt;/h3&gt;

&lt;p&gt;다음과 같이 로그를 파일에 저장한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;prefix_line_1&quot; &amp;gt; source/prefix_test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 td-agent가 파일 생성을 인지한 것을 확인한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat /var/log/td-agent/td-agent.log
 
... 중략 ...
 
2019-08-30 15:35:45 +0900 [info]: #0 following tail of /Users/kevin/dev/fluentd/test/file_path/source/prefix_test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;출력용 파일을 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tail -10f match/file_path_output.log
2019-08-30T15:35:45+09:00	{&quot;message&quot;:&quot;prefix_line_1&quot;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다시 한번 다음과 같이 파일에 로그를 저장한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;prefix_line_2&quot; &amp;gt;&amp;gt; source/prefix_test.txt
$ echo &quot;prefix_line_3&quot; &amp;gt;&amp;gt; source/prefix_test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;출력용 파일을 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tail -10f match/file_path_output.log
2019-08-30T15:35:45+09:00	{&quot;message&quot;:&quot;prefix_line_1&quot;}
2019-08-30T15:36:58+09:00	{&quot;message&quot;:&quot;prefix_line_2&quot;}
2019-08-30T15:37:01+09:00	{&quot;message&quot;:&quot;prefix_line_3&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 파일에 로그를 저장한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;prefix_line_1&quot; &amp;gt; source/prefix_test.log
$ echo &quot;prefix_line_2&quot; &amp;gt;&amp;gt; source/prefix_test.log
$ echo &quot;prefix_line_3&quot; &amp;gt;&amp;gt; source/prefix_test.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 td-agent가 파일 생성을 인지한 것을 확인한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat /var/log/td-agent/td-agent.log
 
... 중략 ...
 
2019-08-30 15:40:00 +0900 [info]: #0 following tail of /Users/kevin/dev/fluentd/test/file_path/source/prefix_test.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;출력용 파일을 확인하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tail -10f match/file_path_output.log
2019-08-30T15:40:00+09:00	{&quot;message&quot;:&quot;prefix_line_1&quot;}
2019-08-30T15:40:09+09:00	{&quot;message&quot;:&quot;prefix_line_2&quot;}
2019-08-30T15:40:13+09:00	{&quot;message&quot;:&quot;prefix_line_3&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;prefix가-일치하지-않는-경우&quot;&gt;prefix가 일치하지 않는 경우&lt;/h3&gt;

&lt;p&gt;다음과 같이 로그를 파일에 저장한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;prefix_line_1&quot; &amp;gt; none.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 td-agent가 파일 생성을 인지하지 못한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat /var/log/td-agent/td-agent.log
 
... 중략 ...

파일 생성 인지 관한 로그가 저장되지 않는다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;출력용 파일을 확인 했을때 로그가 저장되지 않는 것을 알 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tail -10f match/file_path_output.log
입력용 파일에 저장한 로그가 저장되지 않는다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다시 한번 다음과 같이 파일에 로그를 저장한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;prefix_line_2&quot; &amp;gt;&amp;gt; none.txt
$ echo &quot;prefix_line_3&quot; &amp;gt;&amp;gt; none.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;출력용 파일을 확인 했을때 로그가 저장되지 않는 것을 알 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tail -10f match/file_path_output.log
입력용 파일에 저장한 로그가 저장되지 않는다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 결과를 정리하면 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;td-agent 설정 파일상 설정한 경로와 prefix가 일치하는 파일의 경우&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;입력용 파일이 생성되고 로그를 저장하면 출력용 파일에 로그의 형식은 바뀌지만 로그가 저장된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;td-agent 설정 파일상 설정한 경로는 일치하지만 prefix가 일치하지 않는 파일의 경우&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;출력용 파일에 로그가 저장되지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;테스트-결과&quot;&gt;테스트 결과&lt;/h1&gt;

&lt;p&gt;테스트 결과는 다음과 같이 정리할 수 있다.&lt;/p&gt;

&lt;p&gt;파일 경로를 지정하는 경우&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;td-agent 설정 파일상의 입력 파일이 실제로 존재하지 않아도 td-agent는 실행된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;입력용 파일이 생성되고 로그를 저장하면 출력용 파일에 로그의 형식은 바뀌지만 로그가 저장된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;디렉터리와 확장자만 지정하는 경우&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;td-agent 설정 파일상 설정한 경로와 확장자가 일치하는 파일의 경우 : 입력용 파일이 생성되고 로그를 저장하면 출력용 파일에 로그의 형식은 바뀌지만 로그가 저장된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;td-agent 설정 파일상 설정한 경로는 일치하고 확장자가 일치하지 않는 경우 : 출력용 파일에 로그가 저장되지 않는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;디렉터리와 파일명의 prefix만 지정하는 경우&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;td-agent 설정 파일상 설정한 경로와 prefix가 일치하는 파일의 경우 : 입력용 파일이 생성되고 로그를 저장하면 출력용 파일에 로그의 형식은 바뀌지만 로그가 저장된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;td-agent 설정 파일상 설정한 경로는 일치하지만 prefix가 일치하지 않는 파일의 경우 : 출력용 파일에 로그가 저장되지 않는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andro</name><email>seongwoo.dev@gmail.com</email></author><category term="Fluentd" /><summary type="html">Fluentd(이하 td-agent)로 로그 파일의 로그를 수집할 때 파일 경로에 관하여 다음과 같은 케이스가 존재한다.</summary></entry></feed>